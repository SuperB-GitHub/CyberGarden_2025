"""
Indoor Positioning System - Positioning Evaluations Module

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç ESP32 —è–∫–æ—Ä–µ–π –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import numpy as np
import logging
from typing import Dict, List, Tuple, Optional, Any

logger = logging.getLogger(__name__)


class TrilaterationEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ 3D-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""

    def __init__(self, room_config: Dict[str, Any]) -> None:
        self.room_config = room_config

    def update_room_config(self, room_config: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–æ–º–Ω–∞—Ç—ã –∏ —è–∫–æ—Ä–µ–π."""
        self.room_config = room_config
        print(f"üîÑ Trilateration engine updated: room {room_config['width']}x{room_config['height']}, {len(room_config['anchors'])} anchors")

    def calculate_position(self, anchor_distances: Dict[str, float]) -> Optional[Dict[str, float]]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞."""
        try:
            if len(anchor_distances) < 2:
                return None

            print(f"üéØ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {len(anchor_distances)} —è–∫–æ—Ä–µ–π")

            # –ü—Ä–æ–±—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            position = self.trilateration_3d(anchor_distances)
            if not position or not self.is_valid_position(position):
                position = self.trilateration_2d_plus(anchor_distances)
            if not position or not self.is_valid_position(position):
                position = self.simple_geometric_method_3d(anchor_distances)
            if position and not self.is_valid_position(position):
                position = self.correct_position(position)

            return position

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏: {e}")
            return None

    def trilateration_3d(self, anchor_distances: Dict[str, float]) -> Optional[Dict[str, float]]:
        """3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3 —è–∫–æ—Ä—è)."""
        try:
            anchors_list, distances_list = self._prepare_anchor_data(anchor_distances)

            if len(anchors_list) < 3:
                return None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –≤—ã—Å–æ—Ç –¥–ª—è 3D —Ä–∞—Å—á–µ—Ç–∞
            z_coords = [anchor[2] for anchor in anchors_list]
            z_variation = max(z_coords) - min(z_coords)

            if z_variation < 0.5:
                print(f"‚ö†Ô∏è  –ú–∞–ª–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤—ã—Å–æ—Ç ({z_variation:.2f}m), –∏—Å–ø–æ–ª—å–∑—É–µ–º 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é")
                return None

            print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é")
            A_linear, b = self._build_linear_system_3d(anchors_list, distances_list)

            if np.linalg.matrix_rank(A_linear) < 3:
                print("‚ö†Ô∏è  3D –º–∞—Ç—Ä–∏—Ü–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–∞")
                return None

            position = np.linalg.lstsq(A_linear, b, rcond=None)[0]

            if np.any(np.isnan(position)):
                return None

            result = {
                'x': float(position[0]),
                'y': float(position[1]),
                'z': float(position[2])
            }

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è: {result}")
            return result

        except Exception as e:
            logger.debug(f"3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return None

    def trilateration_2d_plus(self, anchor_distances: Dict[str, float]) -> Optional[Dict[str, float]]:
        """2D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã."""
        try:
            anchors_list, distances_list = self._prepare_anchor_data(anchor_distances, use_2d=True)

            if len(anchors_list) < 3:
                return None

            print("üìç –ò—Å–ø–æ–ª—å–∑—É–µ–º 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é")
            A, b = self._build_linear_system_2d(anchors_list, distances_list)

            if np.linalg.matrix_rank(A) < 2:
                print("‚ùå 2D –º–∞—Ç—Ä–∏—Ü–∞ —Ç–∞–∫–∂–µ –≤—ã—Ä–æ–∂–¥–µ–Ω–∞")
                return None

            position_2d = np.linalg.lstsq(A, b, rcond=None)[0]

            if np.any(np.isnan(position_2d)):
                return None

            z_coordinate = self._estimate_smart_z_coordinate(position_2d[0], position_2d[1], anchor_distances)

            result = {
                'x': float(position_2d[0]),
                'y': float(position_2d[1]),
                'z': float(z_coordinate)
            }

            print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è: {result}")
            return result

        except Exception as e:
            logger.debug(f"2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            return None

    def simple_geometric_method_3d(self, anchor_distances: Dict[str, float]) -> Optional[Dict[str, float]]:
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ 3D –ø–æ–∑–∏—Ü–∏–∏ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)."""
        try:
            print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥")

            anchors_info = []
            for anchor_id, distance in anchor_distances.items():
                if anchor_id in self.room_config['anchors']:
                    anchor = self.room_config['anchors'][anchor_id]
                    anchors_info.append({
                        'x': anchor['x'], 'y': anchor['y'], 'z': anchor['z'],
                        'distance': distance
                    })

            if len(anchors_info) < 2:
                return None

            # –ú–µ—Ç–æ–¥ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞
            total_weight = 0
            x_sum, y_sum, z_sum = 0, 0, 0

            for anchor in anchors_info:
                weight = 1.0 / (anchor['distance'] ** 2 + 0.1)
                x_sum += anchor['x'] * weight
                y_sum += anchor['y'] * weight
                z_sum += anchor['z'] * weight
                total_weight += weight

            if total_weight > 0:
                x = x_sum / total_weight
                y = y_sum / total_weight
                z = z_sum / total_weight
                z = self._estimate_smart_z_coordinate(x, y, anchor_distances)

                result = {'x': x, 'y': y, 'z': z}
                print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D –º–µ—Ç–æ–¥: {result}")
                return result

            return None

        except Exception as e:
            logger.debug(f"–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            return {'x': 10.0, 'y': 7.5, 'z': 1.5}  # Fallback –ø–æ–∑–∏—Ü–∏—è

    def _prepare_anchor_data(self, anchor_distances: Dict[str, float], use_2d: bool = False) -> Tuple[
        List[List[float]], List[float]]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —è–∫–æ—Ä–µ–π –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        anchors_list = []
        distances_list = []

        for anchor_id, distance in anchor_distances.items():
            if anchor_id in self.room_config['anchors']:
                anchor = self.room_config['anchors'][anchor_id]
                if use_2d:
                    anchors_list.append([anchor['x'], anchor['y']])
                else:
                    anchors_list.append([anchor['x'], anchor['y'], anchor['z']])
                distances_list.append(distance)
                print(f"üìç –Ø–∫–æ—Ä—å {anchor_id}: ({anchor['x']}, {anchor['y']}, {anchor['z']}) -> {distance}m")

        return anchors_list, distances_list

    def _build_linear_system_3d(self, anchors_list: List[List[float]], distances_list: List[float]) -> Tuple[
        np.ndarray, np.ndarray]:
        """–°—Ç—Ä–æ–∏—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –¥–ª—è 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        A_linear = []
        b = []

        for i in range(1, len(anchors_list)):
            xi, yi, zi = anchors_list[i]
            x0, y0, z0 = anchors_list[0]
            di = distances_list[i]
            d0 = distances_list[0]

            A_i = [2 * (xi - x0), 2 * (yi - y0), 2 * (zi - z0)]
            b_i = (di ** 2 - d0 ** 2 - xi ** 2 + x0 ** 2 - yi ** 2 + y0 ** 2 - zi ** 2 + z0 ** 2)

            A_linear.append(A_i)
            b.append(b_i)

        return np.array(A_linear), np.array(b)

    def _build_linear_system_2d(self, anchors_list: List[List[float]], distances_list: List[float]) -> Tuple[
        np.ndarray, np.ndarray]:
        """–°—Ç—Ä–æ–∏—Ç –ª–∏–Ω–µ–π–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π –¥–ª—è 2D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏."""
        A = []
        b = []

        for i in range(1, len(anchors_list)):
            xi, yi = anchors_list[i]
            x0, y0 = anchors_list[0]
            di = distances_list[i]
            d0 = distances_list[0]

            A_i = [2 * (xi - x0), 2 * (yi - y0)]
            b_i = (di ** 2 - d0 ** 2 - xi ** 2 + x0 ** 2 - yi ** 2 + y0 ** 2)

            A.append(A_i)
            b.append(b_i)

        return np.array(A), np.array(b)

    def _estimate_smart_z_coordinate(self, x: float, y: float, anchor_distances: Dict[str, float]) -> float:
        """–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
        try:
            anchors_info = []
            for anchor_id, distance in anchor_distances.items():
                if anchor_id in self.room_config['anchors']:
                    anchor = self.room_config['anchors'][anchor_id]
                    anchors_info.append({
                        'z': anchor['z'], 'distance': distance
                    })

            # –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
            total_weight, z_weighted = 0, 0
            for anchor in anchors_info:
                weight = 1.0 / (anchor['distance'] + 0.1)
                z_weighted += anchor['z'] * weight
                total_weight += weight

            avg_z = z_weighted / total_weight if total_weight > 0 else 1.5

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º based –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ (–±–ª–∏–∑–æ—Å—Ç—å –∫ —Å—Ç–µ–Ω–∞–º)
            close_to_wall = (x < 2.0 or x > self.room_config['width'] - 2 or
                             y < 2.0 or y > self.room_config['height'] - 2)

            if close_to_wall:
                z_estimate = max(0.3, avg_z * 0.7)
            else:
                z_estimate = min(2.5, max(1.0, avg_z))

            z_estimate = max(0.3, min(3.0, z_estimate))
            print(f"   üìä –£–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ Z: {z_estimate:.2f}m (—Å—Ä–µ–¥–Ω–µ–µ: {avg_z:.2f}m)")
            return z_estimate

        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ Z, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
            return 1.5

    def is_valid_position(self, position: Dict[str, float]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã."""
        x, y, z = position['x'], position['y'], position['z']
        valid = (0 <= x <= self.room_config['width'] and
                 0 <= y <= self.room_config['height'] and
                 0 <= z <= 4.0)

        if not valid:
            print(f"‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏—è –≤–Ω–µ –∫–æ–º–Ω–∞—Ç—ã: ({x:.2f}, {y:.2f}, {z:.2f})")

        return valid

    def correct_position(self, position: Dict[str, float]) -> Dict[str, float]:
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–æ–∑–∏—Ü–∏—é —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—ã."""
        x = max(0.5, min(self.room_config['width'] - 0.5, position['x']))
        y = max(0.5, min(self.room_config['height'] - 0.5, position['y']))
        z = max(0.5, min(3.0, position['z']))

        corrected = {'x': x, 'y': y, 'z': z}
        print(f"   üìç –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {corrected}")
        return corrected


def calculate_confidence(anchor_distances: Dict[str, float], position: Dict[str, float]) -> float:
    """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —è–∫–æ—Ä–µ–π."""
    try:
        variance = np.var(list(anchor_distances.values()))
        confidence = max(0.1, 1.0 - variance / 10.0)
        anchor_count = len(anchor_distances)
        confidence *= min(1.0, anchor_count / 4.0)
        return round(confidence, 2)
    except:
        return 0.5