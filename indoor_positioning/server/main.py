"""
Indoor Positioning System - Enhanced with Detailed Logging
"""

from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import time
import threading
from datetime import datetime, timedelta
from collections import defaultdict, deque
import logging
import json
import os
import sys
import numpy as np
from trilateration import EnhancedTrilaterationEngine, calculate_enhanced_confidence


class AdaptiveKalmanFilter:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è RSSI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    def __init__(self, process_noise=0.1, measurement_noise=2.0):
        self.Q = process_noise  # –®—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.R = measurement_noise  # –®—É–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.P = 1.0  # –ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è –æ—à–∏–±–∫–∏
        self.X = 0.0  # –û—Ü–µ–Ω–∫–∞
        self.measurement_count = 0
        self.measurement_history = deque(maxlen=10)

    def update(self, measurement, packet_count=1):
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à—É–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ packet_count
        adaptive_R = self.R / min(packet_count, 5)  # –£–º–µ–Ω—å—à–∞–µ–º —à—É–º —Å —Ä–æ—Å—Ç–æ–º packet_count

        # –ü—Ä–æ–≥–Ω–æ–∑
        self.P = self.P + self.Q

        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è
        K = self.P / (self.P + adaptive_R)
        self.X = self.X + K * (measurement - self.X)
        self.P = (1 - K) * self.P

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        self.measurement_history.append(measurement)
        self.measurement_count += 1

        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —à—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π
        if len(self.measurement_history) >= 5:
            variance = np.var(list(self.measurement_history))
            self.Q = max(0.01, min(0.5, variance * 0.1))

        return self.X

    def get_confidence(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –æ—Ü–µ–Ω–∫–µ"""
        if self.measurement_count == 0:
            return 0.0
        return min(1.0, self.measurement_count / 10.0) * (1.0 / (1.0 + self.P))

app = Flask(__name__)
app.config['SECRET_KEY'] = 'indoor_positioning_secret'

socketio = SocketIO(app,
                    cors_allowed_origins="*",
                    async_mode='threading',
                    logger=True,
                    engineio_logger=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('positioning_system.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
CONFIG_FILE = 'room_config.json'
ANCHORS_FILE = 'anchors_config.json'

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_ROOM_CONFIG = {
    'width': 20,
    'height': 15,
    'depth': 5
}

DEFAULT_ANCHORS_CONFIG = {
    '–Ø–∫–æ—Ä—å_1': {'x': 0, 'y': 0, 'z': 2.5, 'enabled': True},
    '–Ø–∫–æ—Ä—å_2': {'x': 20, 'y': 0, 'z': 2.5, 'enabled': True},
    '–Ø–∫–æ—Ä—å_3': {'x': 20, 'y': 15, 'z': 2.5, 'enabled': True},
    '–Ø–∫–æ—Ä—å_4': {'x': 0, 'y': 15, 'z': 1.0, 'enabled': True}
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
device_kalman_filters = defaultdict(AdaptiveKalmanFilter)
device_channel_data = defaultdict(lambda: deque(maxlen=20))
device_packet_stats = defaultdict(lambda: {'count': 0, 'first_seen': None})


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–æ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
def get_frequency_correction(channel):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –∫–∞–Ω–∞–ª–∞"""
    # 2.4 GHz –∫–∞–Ω–∞–ª—ã (1-14)
    if 1 <= channel <= 14:
        return 1.0  # –ë–∞–∑–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è 2.4GHz

    # 5 GHz –∫–∞–Ω–∞–ª—ã (36-165)
    elif 36 <= channel <= 165:
        return 0.85  # 5GHz —Å–∏–≥–Ω–∞–ª—ã –∑–∞—Ç—É—Ö–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ

    # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    else:
        return 1.0


def get_channel_group(channel):
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏"""
    if 1 <= channel <= 14:
        return '2.4GHz'
    elif 36 <= channel <= 64:
        return '5GHz_LOW'
    elif 100 <= channel <= 165:
        return '5GHz_HIGH'
    else:
        return 'UNKNOWN'


def apply_channel_correction(distance, channel, rssi_filtered):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏—é —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–Ω–∞–ª–∞ –∏ RSSI"""
    base_correction = get_frequency_correction(channel)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
    if rssi_filtered > -50:
        signal_quality_correction = 0.9  # –û—Ç–ª–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª
    elif rssi_filtered > -70:
        signal_quality_correction = 1.0  # –•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª
    else:
        signal_quality_correction = 1.1  # –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª

    corrected_distance = distance * base_correction * signal_quality_correction

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
    return max(0.1, min(50.0, corrected_distance))


def calculate_distance_confidence(rssi_filtered, packet_count, channel_consistency):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–∑–º–µ—Ä–µ–Ω–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è."""
    # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ RSSI
    if rssi_filtered > -45:
        rssi_confidence = 0.95
    elif rssi_filtered > -55:
        rssi_confidence = 0.85
    elif rssi_filtered > -65:
        rssi_confidence = 0.75
    elif rssi_filtered > -75:
        rssi_confidence = 0.60
    elif rssi_filtered > -85:
        rssi_confidence = 0.45
    else:
        rssi_confidence = 0.30

    # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
    packet_confidence = min(1.0, 0.3 + (packet_count / 10.0) * 0.7)

    # –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    total_confidence = (
            rssi_confidence * 0.6 +  # 60% –∑–∞ RSSI
            packet_confidence * 0.3 +  # 30% –∑–∞ –ø–∞–∫–µ—Ç—ã
            channel_consistency * 0.1  # 10% –∑–∞ –∫–∞–Ω–∞–ª
    )

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –ø—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
    if rssi_filtered > -65 and packet_count >= 3:
        total_confidence = max(total_confidence, 0.6)

    return max(0.1, min(1.0, total_confidence))


def log_system_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("=" * 50)
    logger.info("üöÄ Indoor Positioning System Starting")
    logger.info("=" * 50)
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Working directory: {os.getcwd()}")
    logger.info(f"Config files: {CONFIG_FILE}, {ANCHORS_FILE}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
def load_config():
    global room_config, anchors_config

    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                room_config = json.load(f)
            logger.info(f"‚úÖ Room config loaded from {CONFIG_FILE}")
        else:
            room_config = DEFAULT_ROOM_CONFIG.copy()
            save_room_config()
            logger.info("‚úÖ Default room config created")
    except Exception as e:
        logger.error(f"‚ùå Error loading room config: {e}")
        room_config = DEFAULT_ROOM_CONFIG.copy()

    try:
        if os.path.exists(ANCHORS_FILE):
            with open(ANCHORS_FILE, 'r', encoding='utf-8') as f:
                anchors_config = json.load(f)
            logger.info(f"‚úÖ Anchors config loaded from {ANCHORS_FILE}")
        else:
            anchors_config = DEFAULT_ANCHORS_CONFIG.copy()
            save_anchors_config()
            logger.info("‚úÖ Default anchors config created")
    except Exception as e:
        logger.error(f"‚ùå Error loading anchors config: {e}")
        anchors_config = DEFAULT_ANCHORS_CONFIG.copy()

def save_room_config():
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(room_config, f, indent=2, ensure_ascii=False)
        logger.info(f"üíæ Room config saved to {CONFIG_FILE}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving room config: {e}")
        return False

def save_anchors_config():
    try:
        with open(ANCHORS_FILE, 'w', encoding='utf-8') as f:
            json.dump(anchors_config, f, indent=2, ensure_ascii=False)
        logger.info(f"üíæ Anchors config saved to {ANCHORS_FILE}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving anchors config: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
log_system_info()
load_config()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
anchors = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
devices = {}  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
positions = {}  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
anchor_data = defaultdict(list)

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
system_status = {
    'is_running': True,
    'start_time': datetime.now().isoformat(),
    'total_updates': 0,
    'last_calculation': None
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
statistics = {
    'connections': 0,
    'position_updates': 0,
    'anchor_updates': 0,
    'devices_detected': 0,
    'calculation_errors': 0,
    'active_anchors': 0
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
trilateration_engine = EnhancedTrilaterationEngine({
    'width': room_config['width'],
    'height': room_config['height'],
    'depth': room_config.get('depth', 5),
    'anchors': {k: v for k, v in anchors_config.items() if v['enabled']}
})
logger.info("‚úÖ Trilateration engine initialized")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_anchor_position(anchor_id, x, y, z, room_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —è–∫–æ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã"""
    errors = []

    if x < 0 or x > room_config['width']:
        errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X —è–∫–æ—Ä—è {anchor_id} ({x}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (0-{room_config['width']})")

    if y < 0 or y > room_config['height']:
        errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y —è–∫–æ—Ä—è {anchor_id} ({y}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (0-{room_config['height']})")

    if z < 0 or z > room_config['depth']:
        errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Z —è–∫–æ—Ä—è {anchor_id} ({z}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (0-{room_config['depth']})")

    return errors

def validate_anchors_config(anchors_config, room_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —è–∫–æ—Ä–µ–π"""
    all_errors = []
    enabled_anchors = 0

    for anchor_id, config in anchors_config.items():
        if config.get('enabled', True):
            enabled_anchors += 1
            errors = validate_anchor_position(
                anchor_id, config['x'], config['y'], config['z'], room_config
            )
            all_errors.extend(errors)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∫–æ—Ä–µ–π
    if enabled_anchors < 2:
        all_errors.append("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä—è")

    logger.info(f"üîç Config validation: {enabled_anchors} enabled anchors, {len(all_errors)} errors")
    return all_errors

@app.route('/')
def index():
    logger.info("üåê Home page accessed")
    return render_template('index.html',
                         room_config=room_config,
                         anchors_config=anchors_config)

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
@app.route('/api/config/room')
def get_room_config():
    logger.info("üìã Room config requested")
    return jsonify(room_config)

@app.route('/api/config/anchors')
def get_anchors_config():
    logger.info("üìã Anchors config requested")
    return jsonify(anchors_config)

@app.route('/api/anchors')
def get_anchors():
    return jsonify(dict(anchors))

@app.route('/api/devices')
def get_devices():
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—É—é –∫–æ–ø–∏—é devices
        serializable_devices = {}
        for mac, device in devices.items():
            serializable_devices[mac] = device.copy()
            if 'channels_used' in serializable_devices[mac]:
                serializable_devices[mac]['channels_used'] = list(serializable_devices[mac]['channels_used'])

        return jsonify(serializable_devices)
    except Exception as e:
        logger.error(f"‚ùå Error serializing devices: {e}")
        return jsonify({'error': 'Serialization error'}), 500

@app.route('/api/positions')
def get_positions():
    return jsonify(dict(positions))

@app.route('/api/status')
def get_status():
    return jsonify({
        'system': system_status,
        'statistics': statistics
    })


def _update_active_anchors_from_config():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    current_time = datetime.now().isoformat()

    for anchor_id, config in anchors_config.items():
        if config.get('enabled', True):
            # –ï—Å–ª–∏ —è–∫–æ—Ä—å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if anchor_id in anchors:
                anchors[anchor_id].update({
                    'x': config['x'],
                    'y': config['y'],
                    'z': config['z'],
                    'last_update': current_time
                })
                logger.debug(f"üîÑ Updated active anchor {anchor_id} coordinates")
            else:
                # –ï—Å–ª–∏ —è–∫–æ—Ä—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                anchors[anchor_id] = {
                    'x': config['x'],
                    'y': config['y'],
                    'z': config['z'],
                    'last_update': current_time,
                    'status': 'inactive',  # –ë—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                    'enabled': True,
                    'measurements_count': 0
                }
                logger.debug(f"üÜï Created new anchor {anchor_id} from config")

        # –ï—Å–ª–∏ —è–∫–æ—Ä—å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ - —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        elif anchor_id in anchors and not config.get('enabled', True):
            del anchors[anchor_id]
            logger.debug(f"üóëÔ∏è Removed disabled anchor {anchor_id} from active anchors")

    logger.info(f"üìä Active anchors after config update: {list(anchors.keys())}")

# API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
@app.route('/api/config/room', methods=['POST'])
def update_room_config():
    try:
        data = request.get_json()
        logger.info(f"üîÑ Room config update request: {data}")

        if not data:
            return jsonify({'error': 'No data provided'}), 400

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã
        new_room_config = room_config.copy()
        new_room_config.update(data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∫–æ—Ä—è –æ—Å—Ç–∞—é—Ç—Å—è –≤ –Ω–æ–≤—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
        validation_errors = validate_anchors_config(anchors_config, new_room_config)
        if validation_errors:
            logger.warning(f"‚ùå Room config validation failed: {validation_errors}")
            return jsonify({'error': 'Validation failed', 'details': validation_errors}), 400

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        room_config.update(data)
        if save_room_config():
            # –û–ë–ù–û–í–õ–Ø–ï–ú –ê–ö–¢–ò–í–ù–´–ï –Ø–ö–û–†–Ø –° –ù–û–í–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò
            _update_active_anchors_from_config()

            # –û–ë–ù–û–í–õ–Ø–ï–ú –î–í–ò–ñ–û–ö –¢–†–ò–õ–ê–¢–ï–†–ê–¶–ò–ò –° –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
            enabled_anchors = {k: v for k, v in anchors_config.items() if v.get('enabled', True)}
            trilateration_engine.update_room_config({
                'width': room_config['width'],
                'height': room_config['height'],
                'anchors': enabled_anchors
            })

            logger.info(
                f"‚úÖ Room config updated: width={room_config['width']}, height={room_config['height']}, depth={room_config['depth']}")
            logger.info(f"üìä Trilateration engine updated with {len(enabled_anchors)} anchors")

            emit_log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {room_config}", 'success')
            socketio.emit('room_config_updated', room_config)
            socketio.emit('anchors_data', anchors)
            logger.info("‚úÖ Room config updated successfully")
            return jsonify({'status': 'success', 'config': room_config})
        else:
            logger.error("‚ùå Failed to save room config")
            return jsonify({'error': 'Failed to save config'}), 500
    except Exception as e:
        logger.error(f"‚ùå Error updating room config: {e}")
        return jsonify({'error': str(e)}), 500


@app.route('/api/config/anchors', methods=['POST'])
def update_anchors_config():
    try:
        data = request.get_json()
        logger.info(f"üîÑ Anchors config update request: {data}")

        if not data:
            return jsonify({'error': 'No data provided'}), 400

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validation_errors = validate_anchors_config(data, room_config)
        if validation_errors:
            logger.warning(f"‚ùå Anchors config validation failed: {validation_errors}")
            return jsonify({'error': 'Validation failed', 'details': validation_errors}), 400

        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        anchors_config.clear()
        anchors_config.update(data)

        # –û–ë–ù–û–í–õ–Ø–ï–ú –ê–ö–¢–ò–í–ù–´–ï –Ø–ö–û–†–Ø –° –ù–û–í–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò
        _update_active_anchors_from_config()

        # –û–ë–ù–û–í–õ–Ø–ï–ú –î–í–ò–ñ–û–ö –¢–†–ò–õ–ê–¢–ï–†–ê–¶–ò–ò
        enabled_anchors = {k: v for k, v in anchors_config.items() if v.get('enabled', True)}
        trilateration_engine.update_room_config({
            'width': room_config['width'],
            'height': room_config['height'],
            'anchors': enabled_anchors
        })

        # –õ–û–ì–ò–†–£–ï–ú –ò–ó–ú–ï–ù–ï–ù–ò–Ø
        logger.info(f"üîß Anchors config updated: {len(enabled_anchors)} enabled anchors")
        logger.info(f"üìä Trilateration engine updated with new anchors configuration")

        for anchor_id, new_config in data.items():
            if anchor_id in enabled_anchors:
                logger.info(f"üìç Anchor {anchor_id}: ({new_config['x']}, {new_config['y']}, {new_config['z']})")

        if save_anchors_config():
            emit_log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∫–æ—Ä–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞", 'success')
            socketio.emit('anchors_config_updated', anchors_config)
            socketio.emit('anchors_data', anchors)
            logger.info("‚úÖ Anchors config updated successfully")
            return jsonify({'status': 'success', 'config': anchors_config})
        else:
            logger.error("‚ùå Failed to save anchors config")
            return jsonify({'error': 'Failed to save config'}), 500
    except Exception as e:
        logger.error(f"‚ùå Error updating anchors config: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/config/validate', methods=['POST'])
def validate_config():
    """API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        logger.info("üîç Config validation request")

        room_config_to_validate = data.get('room', room_config)
        anchors_config_to_validate = data.get('anchors', anchors_config)

        errors = validate_anchors_config(anchors_config_to_validate, room_config_to_validate)

        result = {
            'valid': len(errors) == 0,
            'errors': errors,
            'enabled_anchors_count': sum(1 for config in anchors_config_to_validate.values() if config.get('enabled', True))
        }

        logger.info(f"‚úÖ Config validation result: {result}")
        return jsonify(result)
    except Exception as e:
        logger.error(f"‚ùå Config validation error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/anchor_data', methods=['POST'])
def receive_anchor_data():
    try:
        data = request.get_json()
        logger.info(f"üì® Data received from anchor: {data.get('anchor_id')}")

        if not data:
            logger.warning("‚ùå No data received")
            return jsonify({'error': '–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ'}), 400

        anchor_id = data.get('anchor_id')
        measurements = data.get('measurements', [])

        if not anchor_id:
            logger.warning("‚ùå Missing anchor_id")
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç anchor_id'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —è–∫–æ—Ä—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if anchor_id not in anchors_config:
            logger.warning(f"‚ùå Anchor {anchor_id} not found in config")
            return jsonify({'error': 'Anchor not found in config'}), 400

        if not anchors_config[anchor_id].get('enabled', True):
            logger.warning(f"‚ùå Anchor {anchor_id} is disabled")
            return jsonify({'error': 'Anchor disabled'}), 400

        # –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –Ø–ö–û–†–ï –° –ê–ö–¢–£–ê–õ–¨–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò –ò–ó –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
        anchor_config = anchors_config[anchor_id]
        if anchor_id in anchors:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —è–∫–æ—Ä—å
            anchors[anchor_id].update({
                'x': anchor_config['x'],
                'y': anchor_config['y'],
                'z': anchor_config['z'],
                'last_update': datetime.now().isoformat(),
                'status': 'active',
                'measurements_count': len(measurements)
            })
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —è–∫–æ—Ä—å
            anchors[anchor_id] = {
                'x': anchor_config['x'],
                'y': anchor_config['y'],
                'z': anchor_config['z'],
                'last_update': datetime.now().isoformat(),
                'status': 'active',
                'enabled': True,
                'measurements_count': len(measurements)
            }

        logger.info(f"‚úÖ Anchor {anchor_id} updated with coordinates ({anchor_config['x']}, {anchor_config['y']}, {anchor_config['z']})")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        _process_anchor_measurements(anchor_id, measurements)

        statistics['anchor_updates'] += 1
        system_status['total_updates'] += 1

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        calculate_positions()

        return jsonify({'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'})

    except Exception as e:
        logger.error(f"‚ùå Error processing anchor data: {e}")
        statistics['calculation_errors'] += 1
        return jsonify({'error': str(e)}), 500


def _calculate_channel_consistency(mac):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
    if mac not in device_channel_data or len(device_channel_data[mac]) < 2:
        return 0.5  # –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö

    channels = [data['channel'] for data in device_channel_data[mac]]
    unique_channels = len(set(channels))
    total_measurements = len(channels)

    # –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞–∑–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–µ–º –≤—ã—à–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    consistency = 1.0 - (unique_channels / total_measurements) * 0.5

    return max(0.1, min(1.0, consistency))


def _process_anchor_measurements(anchor_id, measurements):
    logger.info(f"üìä Processing {len(measurements)} measurements from {anchor_id}")

    for measurement in measurements:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É measurement –æ—Ç –º–∞—è–∫–∞
        if not isinstance(measurement, dict):
            logger.warning(f"‚ö†Ô∏è Invalid measurement type from anchor: {type(measurement)}")
            continue

        mac = measurement.get('mac')
        distance = measurement.get('distance')

        if mac and distance is not None:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            filtered_distance = device_kalman_filters[mac].update(
                float(distance),
                measurement.get('packet_count', 1)
            )

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –∫–∞–Ω–∞–ª–∞
            corrected_distance = apply_channel_correction(
                filtered_distance,
                measurement.get('channel', 1),
                measurement.get('rssi_filtered', measurement.get('rssi', -70))
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            device_channel_data[mac].append({
                'channel': measurement.get('channel', 1),
                'timestamp': datetime.now().isoformat(),
                'anchor_id': anchor_id
            })

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
            channel_consistency = _calculate_channel_consistency(mac)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∏–∑–º–µ—Ä–µ–Ω–∏–∏
            distance_confidence = calculate_distance_confidence(
                measurement.get('rssi_filtered', measurement.get('rssi', -70)),
                measurement.get('packet_count', 1),
                channel_consistency
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–∫–µ—Ç–æ–≤
            if mac not in device_packet_stats:
                device_packet_stats[mac] = {
                    'count': 0,
                    'first_seen': datetime.now().isoformat()
                }
            device_packet_stats[mac]['count'] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            enriched_measurement = {
                'anchor_id': anchor_id,
                'distance': corrected_distance,
                'distance_original': float(distance),
                'distance_filtered': filtered_distance,
                'rssi': measurement.get('rssi'),
                'rssi_filtered': measurement.get('rssi_filtered', measurement.get('rssi')),
                'channel': measurement.get('channel', 1),
                'packet_count': measurement.get('packet_count', 1),
                'distance_confidence': distance_confidence,
                'channel_consistency': channel_consistency,
                'timestamp': datetime.now().isoformat(),
                'device_timestamp': measurement.get('device_timestamp')
            }

            # –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –ò–ó–ú–ï–†–ï–ù–ò–ô (–º–∞–∫—Å–∏–º—É–º 10)
            if len(anchor_data[mac]) >= 10:
                anchor_data[mac].pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
            anchor_data[mac].append(enriched_measurement)

            if mac not in devices:
                devices[mac] = {
                    'mac': mac,
                    'first_seen': datetime.now().isoformat(),
                    'type': 'mobile_device',
                    'color': _generate_color_from_mac(mac),
                    'packet_count_total': 0,
                    'channels_used': [],
                    'avg_confidence': 0.0
                }
                logger.info(f"üì± New device detected: {mac}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            devices[mac]['packet_count_total'] += 1
            channel = measurement.get('channel', 1)
            if channel not in devices[mac]['channels_used']:
                devices[mac]['channels_used'].append(channel)

            logger.debug(f"üìè Device {mac}: distance {corrected_distance:.2f}m "
                         f"(conf: {distance_confidence:.2f}, ch: {channel}, "
                         f"packets: {measurement.get('packet_count', 1)})")


def calculate_positions():
    try:
        logger.info(f"üéØ Starting position calculation for {len(anchor_data)} devices")
        logger.info(
            f"üìä Using anchors config: {len([k for k, v in anchors_config.items() if v.get('enabled', True)])} enabled anchors")

        calculated_positions = 0
        for mac, measurements_deque in anchor_data.items():
            # –ü–†–ï–û–ë–†–ê–ó–£–ï–ú deque –í LIST
            if isinstance(measurements_deque, deque):
                measurements_list = list(measurements_deque)
            else:
                measurements_list = measurements_deque

            if not isinstance(measurements_list, list):
                logger.warning(f"‚ö†Ô∏è Invalid measurements_list for {mac}: {type(measurements_list)}")
                continue

            if len(measurements_list) == 0:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if not isinstance(measurements_list[0], dict):
                logger.warning(f"‚ö†Ô∏è Invalid measurement structure for {mac}: {type(measurements_list[0])}")
                continue

            if _calculate_device_position(mac, measurements_list):
                calculated_positions += 1

        statistics['devices_detected'] = len(devices)
        logger.info(f"‚úÖ Position calculation completed: {calculated_positions} positions calculated")

    except Exception as e:
        logger.error(f"‚ùå Error in position calculation: {e}")
        statistics['calculation_errors'] += 1

def _group_recent_measurements(measurements_list):
    anchor_measurements = {}
    current_time = datetime.now()

    for measurement in measurements_list:
        measure_time = datetime.fromisoformat(measurement['timestamp'])
        if (current_time - measure_time).total_seconds() <= 10:
            anchor_id = measurement['anchor_id']
            if anchor_id not in anchor_measurements:
                anchor_measurements[anchor_id] = []
            anchor_measurements[anchor_id].append(measurement['distance'])

    return anchor_measurements


def _group_enhanced_measurements(measurements_list):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —è–∫–æ—Ä—è–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    anchor_measurements = {}
    current_time = datetime.now()

    for measurement in measurements_list:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É measurement
        if not isinstance(measurement, dict):
            logger.warning(f"‚ö†Ô∏è Invalid measurement type: {type(measurement)}")
            continue

        measure_time = datetime.fromisoformat(measurement['timestamp'])
        if (current_time - measure_time).total_seconds() <= 10:
            anchor_id = measurement['anchor_id']
            if anchor_id not in anchor_measurements:
                anchor_measurements[anchor_id] = []
            anchor_measurements[anchor_id].append(measurement)

    logger.debug(f"üìä Grouped measurements: {list(anchor_measurements.keys())}")
    return anchor_measurements


def _calculate_device_position(mac, measurements_list):
    try:
        logger.debug(f"üéØ Calculating position for {mac} with {len(measurements_list)} measurements")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —è–∫–æ—Ä—è–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        anchor_measurements = _group_enhanced_measurements(measurements_list)

        if len(anchor_measurements) < 2:
            logger.debug(f"‚ö†Ô∏è Not enough anchors for {mac}: {len(anchor_measurements)}")
            return False

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –ò —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–≤–∏–∂–∫—É —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
        position = trilateration_engine.calculate_position(anchor_measurements)

        if position:
            # –ë–µ—Ä–µ–º confidence –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–≤–∏–∂–∫–∞
            confidence = position.get('confidence', 0.5)

            positions[mac] = {
                'position': position,  # position —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç confidence
                'timestamp': datetime.now().isoformat(),
                'confidence': confidence,
                'anchors_used': len(anchor_measurements),
                'avg_distance_confidence': np.mean(
                    [m[-1].get('distance_confidence', 0.5) for m in anchor_measurements.values() if m]),
                'type': devices[mac].get('type', 'unknown') if mac in devices else 'unknown'
            }

            statistics['position_updates'] += 1
            system_status['last_calculation'] = datetime.now().isoformat()
            _emit_position_update(mac, positions[mac])

            logger.info(
                f"üìç Position calculated for {mac}: ({position['x']:.2f}, {position['y']:.2f}, {position['z']:.2f}) "
                f"with confidence {confidence:.2f}")
            return True
        else:
            logger.debug(f"‚ùå Trilateration failed for {mac}")
            return False

    except Exception as e:
        logger.error(f"‚ùå Error calculating position for {mac}: {str(e)}")
        statistics['calculation_errors'] += 1
        return False

def _emit_position_update(mac, position_data):
    socketio.emit('position_update', {
        'device_id': mac,
        'position': position_data['position'],
        'timestamp': position_data['timestamp'],
        'confidence': position_data['confidence'],
        'anchors_used': position_data['anchors_used']
    })

def _generate_color_from_mac(mac):
    import hashlib
    hash_obj = hashlib.md5(mac.encode())
    hash_hex = hash_obj.hexdigest()[:6]
    return f'#{hash_hex}'

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on('connect')
def handle_connect():
    statistics['connections'] += 1
    logger.info(f"üîå Client connected. Total connections: {statistics['connections']}")

    emit('system_status', system_status)
    emit('anchors_data', anchors)
    emit('devices_data', devices)
    emit('positions_data', positions)
    emit('statistics_update', statistics)
    emit('room_config_updated', room_config)
    emit('anchors_config_updated', anchors_config)
    emit_log('–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', 'info')

@socketio.on('disconnect')
def handle_disconnect():
    statistics['connections'] = max(0, statistics['connections'] - 1)
    logger.info(f"üîå Client disconnected. Total connections: {statistics['connections']}")
    emit_log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è', 'warning')

@socketio.on('toggle_positioning')
def handle_toggle_positioning(data):
    system_status['is_running'] = data.get('is_running', True)
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if system_status['is_running'] else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    logger.info(f"‚ö° System {status_text}")
    emit_log(f'–°–∏—Å—Ç–µ–º–∞ {status_text}', 'info')
    emit('system_status', system_status)

def emit_log(message, log_type='info'):
    log_data = {
        'message': message,
        'type': log_type,
        'timestamp': datetime.now().isoformat()
    }
    logger.info(f"üìù {log_type.upper()}: {message}")
    socketio.emit('log_message', log_data)


def background_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üîÑ Background task started")

    while True:
        try:
            current_time = datetime.now()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π
            _update_anchors_status(current_time)

            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            _cleanup_old_positions(current_time)

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            _cleanup_old_measurements(current_time)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π
            _update_active_anchors_count()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            try:
                socketio.emit('system_status', system_status)
                socketio.emit('statistics_update', statistics)
                socketio.emit('anchors_data', anchors)

                # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º devices –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                serializable_devices = {}
                for mac, device in devices.items():
                    serializable_devices[mac] = device.copy()
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã
                    if 'channels_used' in serializable_devices[mac]:
                        serializable_devices[mac]['channels_used'] = list(serializable_devices[mac]['channels_used'])

                socketio.emit('devices_data', serializable_devices)
                socketio.emit('positions_data', positions)

            except Exception as e:
                logger.error(f"‚ùå Error emitting data: {e}")

        except Exception as e:
            logger.error(f"‚ùå Background task error: {e}")

        time.sleep(2)

def _update_active_anchors_count():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    active_count = 0
    current_time = datetime.now()

    for anchor_id, anchor_data in anchors.items():
        if anchor_data.get('enabled', True):
            last_update = datetime.fromisoformat(anchor_data['last_update'])
            time_since_update = (current_time - last_update).total_seconds()

            # –Ø–∫–æ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            if time_since_update <= 30:
                active_count += 1
                anchors[anchor_id]['status'] = 'active'
            else:
                anchors[anchor_id]['status'] = 'inactive'

    statistics['active_anchors'] = active_count

def _update_anchors_status(current_time):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —è–∫–æ—Ä–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    inactive_anchors = []

    for anchor_id, anchor_data in anchors.items():
        last_update = datetime.fromisoformat(anchor_data['last_update'])
        time_since_update = (current_time - last_update).total_seconds()

        # –ï—Å–ª–∏ —è–∫–æ—Ä—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        if time_since_update > 30:
            if anchor_data['status'] == 'active':
                anchors[anchor_id]['status'] = 'inactive'
                logger.warning(f"‚ö†Ô∏è Anchor {anchor_id} marked as inactive (no data for {time_since_update:.1f}s)")
                emit_log(f'–Ø–∫–æ—Ä—å {anchor_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)', 'warning')
                socketio.emit('anchor_updated', {
                    'anchor_id': anchor_id,
                    'config': anchors[anchor_id]
                })

        # –ï—Å–ª–∏ —è–∫–æ—Ä—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        elif time_since_update > 60:
            inactive_anchors.append(anchor_id)

    # –£–¥–∞–ª—è–µ–º –¥–∞–≤–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è
    for anchor_id in inactive_anchors:
        if anchor_id in anchors:
            del anchors[anchor_id]
            logger.warning(f"üóëÔ∏è Anchor {anchor_id} removed from system")
            emit_log(f'–Ø–∫–æ—Ä—å {anchor_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'warning')
            socketio.emit('anchor_removed', {'anchor_id': anchor_id})

def _cleanup_old_positions(current_time):
    expired_positions = []
    for mac, pos_data in positions.items():
        pos_time = datetime.fromisoformat(pos_data['timestamp'])
        if (current_time - pos_time).total_seconds() > 10:
            expired_positions.append(mac)

    for mac in expired_positions:
        del positions[mac]
        logger.debug(f"üßπ Expired position removed: {mac}")
        socketio.emit('position_removed', {'device_id': mac})

def _cleanup_old_measurements(current_time):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö)"""
    # –¢–µ–ø–µ—Ä—å –∏–∑–º–µ—Ä–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è –¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
    # –£–¥–∞–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ –∏–∑–º–µ—Ä–µ–Ω–∏–π
    expired_devices = []
    for mac in list(anchor_data.keys()):
        if len(anchor_data[mac]) == 0:
            expired_devices.append(mac)

    for mac in expired_devices:
        if mac in devices:
            del devices[mac]
            if mac in anchor_data:
                del anchor_data[mac]
            if mac in device_kalman_filters:
                del device_kalman_filters[mac]
            if mac in device_channel_data:
                del device_channel_data[mac]
            if mac in device_packet_stats:
                del device_packet_stats[mac]
            logger.debug(f"üßπ Expired device removed: {mac}")
            socketio.emit('device_removed', {'device_id': mac})

if __name__ == '__main__':
    logger.info("üöÄ Starting Indoor Positioning System...")
    logger.info("üìç Web interface: http://localhost:5000")

    bg_thread = threading.Thread(target=background_task, daemon=True)
    bg_thread.start()

    try:
        socketio.run(app,
                     host='0.0.0.0',
                     port=5000,
                     debug=False,
                     use_reloader=False,
                     allow_unsafe_werkzeug=True)
    except Exception as e:
        logger.error(f"‚ùå Failed to start server: {e}")