"""
Indoor Positioning System - Enhanced with Detailed Logging
"""

from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import time
import threading
from datetime import datetime, timedelta
from collections import defaultdict, deque
import logging
import json
import os
import sys

from trilateration import TrilaterationEngine, calculate_confidence

app = Flask(__name__)
app.config['SECRET_KEY'] = 'indoor_positioning_secret'

socketio = SocketIO(app,
                    cors_allowed_origins="*",
                    async_mode='threading',
                    logger=True,
                    engineio_logger=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('positioning_system.log')
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
CONFIG_FILE = 'room_config.json'
ANCHORS_FILE = 'anchors_config.json'

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_ROOM_CONFIG = {
    'width': 20,
    'height': 15,
    'depth': 5
}

DEFAULT_ANCHORS_CONFIG = {
    '–Ø–∫–æ—Ä—å_1': {'x': 0, 'y': 0, 'z': 2.5, 'enabled': True},
    '–Ø–∫–æ—Ä—å_2': {'x': 20, 'y': 0, 'z': 2.5, 'enabled': True},
    '–Ø–∫–æ—Ä—å_3': {'x': 20, 'y': 15, 'z': 2.5, 'enabled': True},
    '–Ø–∫–æ—Ä—å_4': {'x': 0, 'y': 15, 'z': 1.0, 'enabled': True}
}

def log_system_info():
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("=" * 50)
    logger.info("üöÄ Indoor Positioning System Starting")
    logger.info("=" * 50)
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Working directory: {os.getcwd()}")
    logger.info(f"Config files: {CONFIG_FILE}, {ANCHORS_FILE}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
def load_config():
    global room_config, anchors_config

    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
                room_config = json.load(f)
            logger.info(f"‚úÖ Room config loaded from {CONFIG_FILE}")
        else:
            room_config = DEFAULT_ROOM_CONFIG.copy()
            save_room_config()
            logger.info("‚úÖ Default room config created")
    except Exception as e:
        logger.error(f"‚ùå Error loading room config: {e}")
        room_config = DEFAULT_ROOM_CONFIG.copy()

    try:
        if os.path.exists(ANCHORS_FILE):
            with open(ANCHORS_FILE, 'r', encoding='utf-8') as f:
                anchors_config = json.load(f)
            logger.info(f"‚úÖ Anchors config loaded from {ANCHORS_FILE}")
        else:
            anchors_config = DEFAULT_ANCHORS_CONFIG.copy()
            save_anchors_config()
            logger.info("‚úÖ Default anchors config created")
    except Exception as e:
        logger.error(f"‚ùå Error loading anchors config: {e}")
        anchors_config = DEFAULT_ANCHORS_CONFIG.copy()

def save_room_config():
    try:
        with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
            json.dump(room_config, f, indent=2, ensure_ascii=False)
        logger.info(f"üíæ Room config saved to {CONFIG_FILE}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving room config: {e}")
        return False

def save_anchors_config():
    try:
        with open(ANCHORS_FILE, 'w', encoding='utf-8') as f:
            json.dump(anchors_config, f, indent=2, ensure_ascii=False)
        logger.info(f"üíæ Anchors config saved to {ANCHORS_FILE}")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error saving anchors config: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
log_system_info()
load_config()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
anchors = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
devices = {}  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
positions = {}  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
anchor_data = defaultdict(lambda: deque(maxlen=10))

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
system_status = {
    'is_running': True,
    'start_time': datetime.now().isoformat(),
    'total_updates': 0,
    'last_calculation': None
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
statistics = {
    'connections': 0,
    'position_updates': 0,
    'anchor_updates': 0,
    'devices_detected': 0,
    'calculation_errors': 0,
    'active_anchors': 0
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
trilateration_engine = TrilaterationEngine({
    'width': room_config['width'],
    'height': room_config['height'],
    'anchors': {k: v for k, v in anchors_config.items() if v['enabled']}
})
logger.info("‚úÖ Trilateration engine initialized")

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_anchor_position(anchor_id, x, y, z, room_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —è–∫–æ—Ä—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã"""
    errors = []

    if x < 0 or x > room_config['width']:
        errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ X —è–∫–æ—Ä—è {anchor_id} ({x}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (0-{room_config['width']})")

    if y < 0 or y > room_config['height']:
        errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Y —è–∫–æ—Ä—è {anchor_id} ({y}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (0-{room_config['height']})")

    if z < 0 or z > room_config['depth']:
        errors.append(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ Z —è–∫–æ—Ä—è {anchor_id} ({z}) –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã (0-{room_config['depth']})")

    return errors

def validate_anchors_config(anchors_config, room_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —è–∫–æ—Ä–µ–π"""
    all_errors = []
    enabled_anchors = 0

    for anchor_id, config in anchors_config.items():
        if config.get('enabled', True):
            enabled_anchors += 1
            errors = validate_anchor_position(
                anchor_id, config['x'], config['y'], config['z'], room_config
            )
            all_errors.extend(errors)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∫–æ—Ä–µ–π
    if enabled_anchors < 2:
        all_errors.append("–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä—è")

    logger.info(f"üîç Config validation: {enabled_anchors} enabled anchors, {len(all_errors)} errors")
    return all_errors

@app.route('/')
def index():
    logger.info("üåê Home page accessed")
    return render_template('index.html',
                         room_config=room_config,
                         anchors_config=anchors_config)

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
@app.route('/api/config/room')
def get_room_config():
    logger.info("üìã Room config requested")
    return jsonify(room_config)

@app.route('/api/config/anchors')
def get_anchors_config():
    logger.info("üìã Anchors config requested")
    return jsonify(anchors_config)

@app.route('/api/anchors')
def get_anchors():
    return jsonify(dict(anchors))

@app.route('/api/devices')
def get_devices():
    return jsonify(dict(devices))

@app.route('/api/positions')
def get_positions():
    return jsonify(dict(positions))

@app.route('/api/status')
def get_status():
    return jsonify({
        'system': system_status,
        'statistics': statistics
    })

# API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
@app.route('/api/config/room', methods=['POST'])
def update_room_config():
    try:
        data = request.get_json()
        logger.info(f"üîÑ Room config update request: {data}")

        if not data:
            return jsonify({'error': 'No data provided'}), 400

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã
        new_room_config = room_config.copy()
        new_room_config.update(data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —è–∫–æ—Ä—è –æ—Å—Ç–∞—é—Ç—Å—è –≤ –Ω–æ–≤—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
        validation_errors = validate_anchors_config(anchors_config, new_room_config)
        if validation_errors:
            logger.warning(f"‚ùå Room config validation failed: {validation_errors}")
            return jsonify({'error': 'Validation failed', 'details': validation_errors}), 400

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        room_config.update(data)
        if save_room_config():
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂–æ–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            trilateration_engine.update_room_config({
                'width': room_config['width'],
                'height': room_config['height'],
                'anchors': {k: v for k, v in anchors_config.items() if v['enabled']}
            })

            emit_log(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {room_config}", 'success')
            socketio.emit('room_config_updated', room_config)
            logger.info("‚úÖ Room config updated successfully")
            return jsonify({'status': 'success', 'config': room_config})
        else:
            logger.error("‚ùå Failed to save room config")
            return jsonify({'error': 'Failed to save config'}), 500
    except Exception as e:
        logger.error(f"‚ùå Error updating room config: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/config/anchors', methods=['POST'])
def update_anchors_config():
    try:
        data = request.get_json()
        logger.info(f"üîÑ Anchors config update request: {data}")

        if not data:
            return jsonify({'error': 'No data provided'}), 400

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        validation_errors = validate_anchors_config(data, room_config)
        if validation_errors:
            logger.warning(f"‚ùå Anchors config validation failed: {validation_errors}")
            return jsonify({'error': 'Validation failed', 'details': validation_errors}), 400

        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        anchors_config.clear()
        anchors_config.update(data)

        if save_anchors_config():
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–≤–∏–∂–æ–∫ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            trilateration_engine.update_room_config({
                'width': room_config['width'],
                'height': room_config['height'],
                'anchors': {k: v for k, v in anchors_config.items() if v['enabled']}
            })

            emit_log("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —è–∫–æ—Ä–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞", 'success')
            socketio.emit('anchors_config_updated', anchors_config)
            logger.info("‚úÖ Anchors config updated successfully")
            return jsonify({'status': 'success', 'config': anchors_config})
        else:
            logger.error("‚ùå Failed to save anchors config")
            return jsonify({'error': 'Failed to save config'}), 500
    except Exception as e:
        logger.error(f"‚ùå Error updating anchors config: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/config/validate', methods=['POST'])
def validate_config():
    """API –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        logger.info("üîç Config validation request")

        room_config_to_validate = data.get('room', room_config)
        anchors_config_to_validate = data.get('anchors', anchors_config)

        errors = validate_anchors_config(anchors_config_to_validate, room_config_to_validate)

        result = {
            'valid': len(errors) == 0,
            'errors': errors,
            'enabled_anchors_count': sum(1 for config in anchors_config_to_validate.values() if config.get('enabled', True))
        }

        logger.info(f"‚úÖ Config validation result: {result}")
        return jsonify(result)
    except Exception as e:
        logger.error(f"‚ùå Config validation error: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/anchor_data', methods=['POST'])
def receive_anchor_data():
    try:
        data = request.get_json()
        logger.info(f"üì® Data received from anchor: {data.get('anchor_id')}")

        if not data:
            logger.warning("‚ùå No data received")
            return jsonify({'error': '–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ'}), 400

        anchor_id = data.get('anchor_id')
        measurements = data.get('measurements', [])

        if not anchor_id:
            logger.warning("‚ùå Missing anchor_id")
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç anchor_id'}), 400

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —è–∫–æ—Ä—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if anchor_id not in anchors_config:
            logger.warning(f"‚ùå Anchor {anchor_id} not found in config")
            return jsonify({'error': 'Anchor not found in config'}), 400

        if not anchors_config[anchor_id].get('enabled', True):
            logger.warning(f"‚ùå Anchor {anchor_id} is disabled")
            return jsonify({'error': 'Anchor disabled'}), 400

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∫–æ—Ä–µ (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π)
        anchor_config = anchors_config[anchor_id]
        anchors[anchor_id] = {
            'x': anchor_config['x'],
            'y': anchor_config['y'],
            'z': anchor_config['z'],
            'last_update': datetime.now().isoformat(),
            'status': 'active',
            'enabled': True,
            'measurements_count': len(measurements)
        }

        logger.info(f"‚úÖ Anchor {anchor_id} marked as active with {len(measurements)} measurements")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        _process_anchor_measurements(anchor_id, measurements)

        statistics['anchor_updates'] += 1
        system_status['total_updates'] += 1

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        calculate_positions()

        return jsonify({'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'})

    except Exception as e:
        logger.error(f"‚ùå Error processing anchor data: {e}")
        statistics['calculation_errors'] += 1
        return jsonify({'error': str(e)}), 500

def _process_anchor_measurements(anchor_id, measurements):
    logger.info(f"üìä Processing {len(measurements)} measurements from {anchor_id}")

    for measurement in measurements:
        mac = measurement.get('mac')
        distance = measurement.get('distance')
        rssi = measurement.get('rssi')

        if mac and distance is not None:
            anchor_data[mac].append({
                'anchor_id': anchor_id,
                'distance': float(distance),
                'rssi': rssi,
                'timestamp': datetime.now().isoformat()
            })

            if mac not in devices:
                devices[mac] = {
                    'mac': mac,
                    'first_seen': datetime.now().isoformat(),
                    'type': 'mobile_device',
                    'color': _generate_color_from_mac(mac)
                }
                logger.info(f"üì± New device detected: {mac}")

def calculate_positions():
    try:
        logger.info(f"üéØ Starting position calculation for {len(anchor_data)} devices")

        calculated_positions = 0
        for mac, measurements_list in anchor_data.items():
            anchor_measurements = _group_recent_measurements(measurements_list)

            if len(anchor_measurements) >= 2:
                if _calculate_device_position(mac, anchor_measurements):
                    calculated_positions += 1
            else:
                logger.debug(f"‚ö†Ô∏è Not enough anchors for {mac}: {len(anchor_measurements)}")

        statistics['devices_detected'] = len(devices)
        logger.info(f"‚úÖ Position calculation completed: {calculated_positions} positions calculated")

    except Exception as e:
        logger.error(f"‚ùå Error in position calculation: {e}")
        statistics['calculation_errors'] += 1

def _group_recent_measurements(measurements_list):
    anchor_measurements = {}
    current_time = datetime.now()

    for measurement in measurements_list:
        measure_time = datetime.fromisoformat(measurement['timestamp'])
        if (current_time - measure_time).total_seconds() <= 10:
            anchor_id = measurement['anchor_id']
            if anchor_id not in anchor_measurements:
                anchor_measurements[anchor_id] = []
            anchor_measurements[anchor_id].append(measurement['distance'])

    return anchor_measurements

def _calculate_device_position(mac, anchor_measurements):
    avg_distances = {}
    for anchor_id, distances in anchor_measurements.items():
        avg_distances[anchor_id] = sum(distances) / len(distances)

    logger.debug(f"üìê Calculating position for {mac} using anchors: {list(avg_distances.keys())}")

    position = trilateration_engine.calculate_position(avg_distances)

    if position:
        confidence = calculate_confidence(avg_distances, position)

        positions[mac] = {
            'position': position,
            'timestamp': datetime.now().isoformat(),
            'confidence': confidence * 0.8 if len(avg_distances) == 2 else confidence,
            'anchors_used': len(avg_distances),
            'type': devices[mac]['type'] if mac in devices else 'unknown'
        }

        statistics['position_updates'] += 1
        system_status['last_calculation'] = datetime.now().isoformat()

        _emit_position_update(mac, positions[mac])

        logger.info(f"üìç Position calculated for {mac}: ({position['x']:.2f}, {position['y']:.2f}, {position['z']:.2f})")
        return True

    logger.warning(f"‚ùå Failed to calculate position for {mac}")
    return False

def _emit_position_update(mac, position_data):
    socketio.emit('position_update', {
        'device_id': mac,
        'position': position_data['position'],
        'timestamp': position_data['timestamp'],
        'confidence': position_data['confidence'],
        'anchors_used': position_data['anchors_used']
    })

def _generate_color_from_mac(mac):
    import hashlib
    hash_obj = hashlib.md5(mac.encode())
    hash_hex = hash_obj.hexdigest()[:6]
    return f'#{hash_hex}'

# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on('connect')
def handle_connect():
    statistics['connections'] += 1
    logger.info(f"üîå Client connected. Total connections: {statistics['connections']}")

    emit('system_status', system_status)
    emit('anchors_data', anchors)
    emit('devices_data', devices)
    emit('positions_data', positions)
    emit('statistics_update', statistics)
    emit('room_config_updated', room_config)
    emit('anchors_config_updated', anchors_config)
    emit_log('–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', 'info')

@socketio.on('disconnect')
def handle_disconnect():
    statistics['connections'] = max(0, statistics['connections'] - 1)
    logger.info(f"üîå Client disconnected. Total connections: {statistics['connections']}")
    emit_log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è', 'warning')

@socketio.on('toggle_positioning')
def handle_toggle_positioning(data):
    system_status['is_running'] = data.get('is_running', True)
    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if system_status['is_running'] else "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    logger.info(f"‚ö° System {status_text}")
    emit_log(f'–°–∏—Å—Ç–µ–º–∞ {status_text}', 'info')
    emit('system_status', system_status)

def emit_log(message, log_type='info'):
    log_data = {
        'message': message,
        'type': log_type,
        'timestamp': datetime.now().isoformat()
    }
    logger.info(f"üìù {log_type.upper()}: {message}")
    socketio.emit('log_message', log_data)


def background_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üîÑ Background task started")

    while True:
        try:
            current_time = datetime.now()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π
            _update_anchors_status(current_time)

            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π
            _cleanup_old_positions(current_time)

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
            _cleanup_old_measurements(current_time)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π
            _update_active_anchors_count()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            socketio.emit('system_status', system_status)
            socketio.emit('statistics_update', statistics)
            socketio.emit('anchors_data', anchors)
            socketio.emit('devices_data', devices)
            socketio.emit('positions_data', positions)

        except Exception as e:
            logger.error(f"‚ùå Background task error: {e}")

        time.sleep(2)


def _update_active_anchors_count():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    active_count = 0
    current_time = datetime.now()

    for anchor_id, anchor_data in anchors.items():
        if anchor_data.get('enabled', True):
            last_update = datetime.fromisoformat(anchor_data['last_update'])
            time_since_update = (current_time - last_update).total_seconds()

            # –Ø–∫–æ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
            if time_since_update <= 30:
                active_count += 1
                anchors[anchor_id]['status'] = 'active'
            else:
                anchors[anchor_id]['status'] = 'inactive'

    statistics['active_anchors'] = active_count

def _update_anchors_status(current_time):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —è–∫–æ—Ä–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    inactive_anchors = []

    for anchor_id, anchor_data in anchors.items():
        last_update = datetime.fromisoformat(anchor_data['last_update'])
        time_since_update = (current_time - last_update).total_seconds()

        # –ï—Å–ª–∏ —è–∫–æ—Ä—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π
        if time_since_update > 30:
            if anchor_data['status'] == 'active':
                anchors[anchor_id]['status'] = 'inactive'
                logger.warning(f"‚ö†Ô∏è Anchor {anchor_id} marked as inactive (no data for {time_since_update:.1f}s)")
                emit_log(f'–Ø–∫–æ—Ä—å {anchor_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)', 'warning')
                socketio.emit('anchor_updated', {
                    'anchor_id': anchor_id,
                    'config': anchors[anchor_id]
                })

        # –ï—Å–ª–∏ —è–∫–æ—Ä—å –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        elif time_since_update > 60:
            inactive_anchors.append(anchor_id)

    # –£–¥–∞–ª—è–µ–º –¥–∞–≤–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è
    for anchor_id in inactive_anchors:
        if anchor_id in anchors:
            del anchors[anchor_id]
            logger.warning(f"üóëÔ∏è Anchor {anchor_id} removed from system")
            emit_log(f'–Ø–∫–æ—Ä—å {anchor_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'warning')
            socketio.emit('anchor_removed', {'anchor_id': anchor_id})

def _cleanup_old_positions(current_time):
    expired_positions = []
    for mac, pos_data in positions.items():
        pos_time = datetime.fromisoformat(pos_data['timestamp'])
        if (current_time - pos_time).total_seconds() > 10:
            expired_positions.append(mac)

    for mac in expired_positions:
        del positions[mac]
        logger.debug(f"üßπ Expired position removed: {mac}")
        socketio.emit('position_removed', {'device_id': mac})

def _cleanup_old_measurements(current_time):
    expired_devices = []
    for mac in list(anchor_data.keys()):
        anchor_data[mac] = deque(
            [m for m in anchor_data[mac]
             if (current_time - datetime.fromisoformat(m['timestamp'])).total_seconds() <= 10],
            maxlen=10
        )

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–æ–ª–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –µ–≥–æ
        if len(anchor_data[mac]) == 0:
            expired_devices.append(mac)

    for mac in expired_devices:
        if mac in devices:
            del devices[mac]
            del anchor_data[mac]
            logger.debug(f"üßπ Expired device removed: {mac}")
            socketio.emit('device_removed', {'device_id': mac})

if __name__ == '__main__':
    logger.info("üöÄ Starting Indoor Positioning System...")
    logger.info("üìç Web interface: http://localhost:5000")

    bg_thread = threading.Thread(target=background_task, daemon=True)
    bg_thread.start()

    try:
        socketio.run(app,
                     host='0.0.0.0',
                     port=5000,
                     debug=False,
                     use_reloader=False,
                     allow_unsafe_werkzeug=True)
    except Exception as e:
        logger.error(f"‚ùå Failed to start server: {e}")
