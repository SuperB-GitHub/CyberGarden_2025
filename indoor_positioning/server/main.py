"""
Indoor Positioning System - Main Server Module

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç ESP32 —è–∫–æ—Ä–µ–π, –≤—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç
–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.
"""

from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import time
import threading
from datetime import datetime
from collections import defaultdict, deque
import logging

from trilateration import TrilaterationEngine, calculate_confidence

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ SocketIO
app = Flask(__name__)
app.config['SECRET_KEY'] = 'indoor_positioning_secret'

socketio = SocketIO(app,
                    cors_allowed_origins="*",
                    async_mode='threading',
                    logger=False,
                    engineio_logger=False)

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã
anchors = {}  # –î–∞–Ω–Ω—ã–µ –æ—Ç —è–∫–æ—Ä–µ–π {anchor_id: anchor_data}
devices = {}  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {mac: device_info}
positions = {}  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ {mac: position_data}
anchor_data = defaultdict(lambda: deque(maxlen=10))  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç —è–∫–æ—Ä–µ–π

# –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
system_status = {
    'is_running': True,
    'start_time': datetime.now().isoformat(),
    'total_updates': 0,
    'last_calculation': None
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —è–∫–æ—Ä–µ–π
room_config = {
    'width': 20,
    'height': 15,
    'anchors': {
        '–Ø–∫–æ—Ä—å_1': {'x': 0, 'y': 0, 'z': 2.5},
        '–Ø–∫–æ—Ä—å_2': {'x': 20, 'y': 0, 'z': 2.5},
        '–Ø–∫–æ—Ä—å_3': {'x': 20, 'y': 15, 'z': 2.5},
        '–Ø–∫–æ—Ä—å_4': {'x': 0, 'y': 15, 'z': 1.0}
    }
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–≤–∏–∂–∫–∞ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
trilateration_engine = TrilaterationEngine(room_config)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
statistics = {
    'connections': 0,
    'position_updates': 0,
    'anchor_updates': 0,
    'devices_detected': 0,
    'calculation_errors': 0
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@app.route('/')
def index() -> str:
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    return render_template('index.html', room_config=room_config)


@app.route('/api/status')
def api_status() -> jsonify:
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    return jsonify({
        'system': system_status,
        'statistics': statistics,
        'anchors_count': len(anchors),
        'devices_count': len(devices),
        'positions_count': len(positions),
        'timestamp': datetime.now().isoformat()
    })


@app.route('/api/anchors')
def get_anchors() -> jsonify:
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π."""
    return jsonify(anchors)


@app.route('/api/devices')
def get_devices() -> jsonify:
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    return jsonify(devices)


@app.route('/api/positions')
def get_positions() -> jsonify:
    """API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
    return jsonify(positions)


def normalize_mac(mac: str) -> str:
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç MAC-–∞–¥—Ä–µ—Å, —É–±–∏—Ä–∞—è randomized —á–∞—Å—Ç–∏.

    Args:
        mac: –ò—Å—Ö–æ–¥–Ω—ã–π MAC-–∞–¥—Ä–µ—Å

    Returns:
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π MAC-–∞–¥—Ä–µ—Å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è randomized MAC)
    """
    if not mac:
        return mac

    mac_clean = mac.upper().replace(':', '').replace('-', '')

    # –î–ª—è randomized MAC –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤
    if len(mac_clean) == 12:
        return mac_clean[6:]

    return mac_clean


@app.route('/api/anchor_data', methods=['POST'])
def receive_anchor_data() -> tuple[jsonify, int]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏–π –æ—Ç ESP32 —è–∫–æ—Ä–µ–π.

    Args:
        JSON –¥–∞–Ω–Ω—ã–µ –æ—Ç —è–∫–æ—Ä—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è RSSI

    Returns:
        JSON –æ—Ç–≤–µ—Ç —Å —Å—Ç–∞—Ç—É—Å–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        data = request.get_json()

        if not data:
            return jsonify({'error': '–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ'}), 400

        anchor_id = data.get('anchor_id')
        measurements = data.get('measurements', [])

        print(f"üì® –î–∞–Ω–Ω—ã–µ –æ—Ç {anchor_id}: {len(measurements)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")

        if not anchor_id:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç anchor_id'}), 400

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∫–æ—Ä–µ
        anchors[anchor_id] = {
            'x': data.get('x', 0),
            'y': data.get('y', 0),
            'z': data.get('z', 2.5),
            'last_update': datetime.now().isoformat(),
            'status': 'active'
        }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç —è–∫–æ—Ä—è
        _process_anchor_measurements(anchor_id, measurements)

        statistics['anchor_updates'] += 1
        system_status['total_updates'] += 1

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        _print_devices_statistics()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π
        calculate_positions()

        return jsonify({'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —è–∫–æ—Ä—è: {e}")
        statistics['calculation_errors'] += 1
        return jsonify({'error': str(e)}), 500


def _process_anchor_measurements(anchor_id: str, measurements: list) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —è–∫–æ—Ä—è.

    Args:
        anchor_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —è–∫–æ—Ä—è
        measurements: –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π RSSI
    """
    for measurement in measurements:
        mac = measurement.get('mac')
        distance = measurement.get('distance')
        rssi = measurement.get('rssi')

        if mac and distance is not None:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
            anchor_data[mac].append({
                'anchor_id': anchor_id,
                'distance': float(distance),
                'rssi': rssi,
                'timestamp': datetime.now().isoformat()
            })

            print(f"   üìç {anchor_id} -> {mac}: {distance}m (RSSI: {rssi})")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            if mac not in devices:
                devices[mac] = {
                    'mac': mac,
                    'first_seen': datetime.now().isoformat(),
                    'type': 'mobile_device',
                    'color': _generate_color_from_mac(mac)
                }


def _print_devices_statistics() -> None:
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º."""
    print(f"üìä –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(anchor_data)}")
    for mac, measurements_list in anchor_data.items():
        recent_measurements = list(measurements_list)[-10:] if len(measurements_list) > 10 else list(measurements_list)
        anchors_seen = set(m['anchor_id'] for m in recent_measurements)
        print(f"   üì± {mac}: –≤–∏–¥–µ–ª–∏ —è–∫–æ—Ä—è {list(anchors_seen)}")


def calculate_positions() -> None:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥—É–ª—å —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 —è–∫–æ—Ä—è —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏.
    """
    try:
        print(f"\nüîç === –ù–ê–ß–ê–õ–û –†–ê–°–ß–ï–¢–ê –ü–û–ó–ò–¶–ò–ô ===")

        for mac, measurements_list in anchor_data.items():
            print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {mac}, –≤—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(measurements_list)}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —è–∫–æ—Ä—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥
            anchor_measurements = _group_recent_measurements(measurements_list)

            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è –¥–ª—è {mac}: {list(anchor_measurements.keys())}")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∫–æ—Ä–µ–π
            if len(anchor_measurements) >= 2:
                _calculate_device_position(mac, anchor_measurements)
            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∫–æ—Ä–µ–π –¥–ª—è {mac}: {len(anchor_measurements)}")

        statistics['devices_detected'] = len(devices)
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {statistics['position_updates']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
        statistics['calculation_errors'] += 1


def _group_recent_measurements(measurements_list: list) -> dict:
    """
    –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —è–∫–æ—Ä—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥.

    Args:
        measurements_list: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    Returns:
        –°–ª–æ–≤–∞—Ä—å {anchor_id: [distances]} —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏
    """
    anchor_measurements = {}
    current_time = datetime.now()

    for measurement in measurements_list:
        measure_time = datetime.fromisoformat(measurement['timestamp'])
        if (current_time - measure_time).total_seconds() <= 10:
            anchor_id = measurement['anchor_id']
            if anchor_id not in anchor_measurements:
                anchor_measurements[anchor_id] = []
            anchor_measurements[anchor_id].append(measurement['distance'])

    return anchor_measurements


def _calculate_device_position(mac: str, anchor_measurements: dict) -> None:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.

    Args:
        mac: MAC-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        anchor_measurements: –ò–∑–º–µ—Ä–µ–Ω–∏—è –æ—Ç —è–∫–æ—Ä–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –∫–∞–∂–¥–æ–≥–æ —è–∫–æ—Ä—è
    avg_distances = {}
    for anchor_id, distances in anchor_measurements.items():
        avg_distances[anchor_id] = sum(distances) / len(distances)

    print(f"üéØ –Ø–∫–æ—Ä–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ {mac}: {len(avg_distances)}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏
    position = trilateration_engine.calculate_position(avg_distances)

    if position:
        confidence = calculate_confidence(avg_distances, position)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        positions[mac] = {
            'position': position,
            'timestamp': datetime.now().isoformat(),
            'confidence': confidence * 0.8 if len(avg_distances) == 2 else confidence,
            'anchors_used': len(avg_distances),
            'type': devices[mac]['type'] if mac in devices else 'unknown'
        }

        statistics['position_updates'] += 1
        system_status['last_calculation'] = datetime.now().isoformat()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        _emit_position_update(mac, positions[mac])

        emit_log(f"–ü–æ–∑–∏—Ü–∏—è –¥–ª—è {mac}: ({position['x']:.1f}, {position['y']:.1f}, {position['z']:.1f})", 'success')
    else:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {mac}")


def _emit_position_update(mac: str, position_data: dict) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —á–µ—Ä–µ–∑ WebSocket.

    Args:
        mac: MAC-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        position_data: –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    socketio.emit('position_update', {
        'device_id': mac,
        'position': position_data['position'],
        'timestamp': position_data['timestamp'],
        'confidence': position_data['confidence'],
        'anchors_used': position_data['anchors_used']
    })


def _generate_color_from_mac(mac: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ MAC-–∞–¥—Ä–µ—Å–∞.

    Args:
        mac: MAC-–∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞

    Returns:
        HEX –∫–æ–¥ —Ü–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ #RRGGBB
    """
    import hashlib
    hash_obj = hashlib.md5(mac.encode())
    hash_hex = hash_obj.hexdigest()[:6]
    return f'#{hash_hex}'


# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on('connect')
def handle_connect() -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ WebSocket –∫–ª–∏–µ–Ω—Ç–∞."""
    statistics['connections'] += 1
    emit('system_status', system_status)
    emit('anchors_data', anchors)
    emit('devices_data', devices)
    emit('positions_data', positions)
    emit('statistics_update', statistics)
    emit_log('–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', 'info')


@socketio.on('disconnect')
def handle_disconnect() -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–∞."""
    statistics['connections'] = max(0, statistics['connections'] - 1)
    emit_log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è', 'warning')


@socketio.on('reset_system')
def handle_reset_system() -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É, –æ—á–∏—â–∞—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
    anchors.clear()
    devices.clear()
    positions.clear()
    anchor_data.clear()
    statistics.update({
        'position_updates': 0,
        'anchor_updates': 0,
        'devices_detected': 0,
        'calculation_errors': 0
    })
    socketio.emit('system_reset')
    emit_log('–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'info')


def emit_log(message: str, log_type: str = 'info') -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥ —á–µ—Ä–µ–∑ WebSocket.

    Args:
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        log_type: –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (info, warning, error, success)
    """
    log_data = {
        'message': message,
        'type': log_type,
        'timestamp': datetime.now().isoformat()
    }
    socketio.emit('log_message', log_data)
    logger.info(f"[{log_type.upper()}] {message}")


def background_task() -> None:
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã.

    –í—ã–ø–æ–ª–Ω—è–µ—Ç:
    - –û—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏–π (>10 —Å–µ–∫—É–Ω–¥)
    - –û—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
    - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    while True:
        try:
            current_time = datetime.now()

            # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏
            _cleanup_old_positions(current_time)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            _cleanup_old_measurements(current_time)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            socketio.emit('system_status', system_status)
            socketio.emit('statistics_update', statistics)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")

        time.sleep(2)


def _cleanup_old_positions(current_time: datetime) -> None:
    """–û—á–∏—â–∞–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥."""
    expired_positions = []
    for mac, pos_data in positions.items():
        pos_time = datetime.fromisoformat(pos_data['timestamp'])
        if (current_time - pos_time).total_seconds() > 10:
            expired_positions.append(mac)

    for mac in expired_positions:
        del positions[mac]


def _cleanup_old_measurements(current_time: datetime) -> None:
    """–û—á–∏—â–∞–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 10 —Å–µ–∫—É–Ω–¥."""
    for mac in list(anchor_data.keys()):
        anchor_data[mac] = deque(
            [m for m in anchor_data[mac]
             if (current_time - datetime.fromisoformat(m['timestamp'])).total_seconds() <= 10],
            maxlen=10
        )


if __name__ == '__main__':
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏...")
    print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32 —è–∫–æ—Ä–µ–π...")
    print("üìç –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    bg_thread = threading.Thread(target=background_task, daemon=True)
    bg_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    socketio.run(app,
                 host='0.0.0.0',
                 port=5000,
                 debug=False,
                 use_reloader=False,
                 allow_unsafe_werkzeug=True)
