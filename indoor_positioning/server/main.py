from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO, emit
import time
import threading
from datetime import datetime
import math
import numpy as np
from collections import defaultdict, deque
import logging

app = Flask(__name__)
app.config['SECRET_KEY'] = 'indoor_positioning_secret'

socketio = SocketIO(app,
                    cors_allowed_origins="*",
                    async_mode='threading',
                    logger=False,
                    engineio_logger=False)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã
anchors = {}  # –î–∞–Ω–Ω—ã–µ –æ—Ç —è–∫–æ—Ä–µ–π
devices = {}  # –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
positions = {}  # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
anchor_data = defaultdict(lambda: deque(maxlen=10))  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç —è–∫–æ—Ä–µ–π

system_status = {
    'is_running': True,
    'start_time': datetime.now().isoformat(),
    'total_updates': 0,
    'last_calculation': None
}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è –∏ —è–∫–æ—Ä–µ–π
room_config = {
    'width': 20,
    'height': 15,
    'anchors': {
        '–Ø–∫–æ—Ä—å_1': {'x': 0, 'y': 0, 'z': 2.5},
        '–Ø–∫–æ—Ä—å_2': {'x': 20, 'y': 0, 'z': 2.5},
        '–Ø–∫–æ—Ä—å_3': {'x': 20, 'y': 15, 'z': 2.5},
        '–Ø–∫–æ—Ä—å_4': {'x': 0, 'y': 15, 'z': 1.0}
    }
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
statistics = {
    'connections': 0,
    'position_updates': 0,
    'anchor_updates': 0,
    'devices_detected': 0,
    'calculation_errors': 0
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@app.route('/')
def index():
    return render_template('index.html', room_config=room_config)


@app.route('/api/status')
def api_status():
    return jsonify({
        'system': system_status,
        'statistics': statistics,
        'anchors_count': len(anchors),
        'devices_count': len(devices),
        'positions_count': len(positions),
        'timestamp': datetime.now().isoformat()
    })


@app.route('/api/anchors')
def get_anchors():
    return jsonify(anchors)


@app.route('/api/devices')
def get_devices():
    return jsonify(devices)


@app.route('/api/positions')
def get_positions():
    return jsonify(positions)


def normalize_mac(mac):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º MAC-–∞–¥—Ä–µ—Å, —É–±–∏—Ä–∞—è randomized —á–∞—Å—Ç–∏"""
    if not mac:
        return mac

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    mac_clean = mac.upper().replace(':', '').replace('-', '')

    # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –º–æ–∂–µ–º –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—ã–π –±–∞–π—Ç
    if len(mac_clean) == 12:
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ (3 –±–∞–π—Ç–∞) –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        return mac_clean[6:]

    return mac_clean


@app.route('/api/anchor_data', methods=['POST'])
def receive_anchor_data():
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —è–∫–æ—Ä–µ–π"""
    try:
        data = request.get_json()

        if not data:
            return jsonify({'error': '–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ'}), 400

        anchor_id = data.get('anchor_id')
        measurements = data.get('measurements', [])

        print(f"üì® –î–∞–Ω–Ω—ã–µ –æ—Ç {anchor_id}: {len(measurements)} –∏–∑–º–µ—Ä–µ–Ω–∏–π")

        if not anchor_id:
            return jsonify({'error': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç anchor_id'}), 400

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∫–æ—Ä–µ
        anchors[anchor_id] = {
            'x': data.get('x', 0),
            'y': data.get('y', 0),
            'z': data.get('z', 2.5),
            'last_update': datetime.now().isoformat(),
            'status': 'active'
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
        for measurement in measurements:
            mac = measurement.get('mac')
            distance = measurement.get('distance')
            rssi = measurement.get('rssi')

            if mac and distance is not None:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏
                anchor_data[mac].append({
                    'anchor_id': anchor_id,
                    'distance': float(distance),
                    'rssi': rssi,
                    'timestamp': datetime.now().isoformat()
                })

                print(f"   üìç {anchor_id} -> {mac}: {distance}m (RSSI: {rssi})")

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                if mac not in devices:
                    devices[mac] = {
                        'mac': mac,
                        'first_seen': datetime.now().isoformat(),
                        'type': 'mobile_device',
                        'color': generate_color_from_mac(mac)
                    }

        statistics['anchor_updates'] += 1
        system_status['total_updates'] += 1

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨)
        print(f"üìä –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(anchor_data)}")
        for mac, measurements_list in anchor_data.items():
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π –∏–ª–∏ –≤—Å–µ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 10
            recent_measurements = list(measurements_list)[-10:] if len(measurements_list) > 10 else list(
                measurements_list)
            anchors_seen = set(m['anchor_id'] for m in recent_measurements)
            print(f"   üì± {mac}: –≤–∏–¥–µ–ª–∏ —è–∫–æ—Ä—è {list(anchors_seen)}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π
        calculate_positions()

        return jsonify({'status': 'success', 'message': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —è–∫–æ—Ä—è: {e}")
        statistics['calculation_errors'] += 1
        return jsonify({'error': str(e)}), 500


def calculate_positions():
    """–í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        print(f"\nüîç === –ù–ê–ß–ê–õ–û –†–ê–°–ß–ï–¢–ê –ü–û–ó–ò–¶–ò–ô ===")

        for mac, measurements_list in anchor_data.items():
            print(f"\nüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {mac}, –≤—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {len(measurements_list)}")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ —è–∫–æ—Ä—è–º
            anchor_measurements = {}
            current_time = datetime.now()

            for measurement in measurements_list:
                measure_time = datetime.fromisoformat(measurement['timestamp'])
                if (current_time - measure_time).total_seconds() <= 10:
                    anchor_id = measurement['anchor_id']
                    if anchor_id not in anchor_measurements:
                        anchor_measurements[anchor_id] = []
                    anchor_measurements[anchor_id].append(measurement['distance'])

            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è –¥–ª—è {mac}: {list(anchor_measurements.keys())}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–∏–Ω–∏–º—É–º 2 —è–∫–æ—Ä—è - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
            if len(anchor_measurements) >= 2:
                avg_distances = {}
                for anchor_id, distances in anchor_measurements.items():
                    avg_distances[anchor_id] = sum(distances) / len(distances)

                print(f"üéØ –Ø–∫–æ—Ä–µ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ {mac}: {len(avg_distances)}")
                position = trilateration_3d(avg_distances)

                # –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞, –Ω–æ –≤–Ω–µ –∫–æ–º–Ω–∞—Ç—ã - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
                if position and not is_valid_position(position, room_config):
                    print(f"üîÑ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {mac}")
                    position = correct_position(position, room_config)

                if position:
                    confidence = calculate_confidence(avg_distances, position)

                    positions[mac] = {
                        'position': position,
                        'timestamp': datetime.now().isoformat(),
                        'confidence': confidence * 0.8 if len(avg_distances) == 2 else confidence,
                        # –ü–æ–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è 2 —è–∫–æ—Ä–µ–π
                        'anchors_used': len(avg_distances),
                        'type': devices[mac]['type'] if mac in devices else 'unknown'
                    }

                    statistics['position_updates'] += 1
                    system_status['last_calculation'] = datetime.now().isoformat()

                    socketio.emit('position_update', {
                        'device_id': mac,
                        'position': position,
                        'timestamp': positions[mac]['timestamp'],
                        'confidence': positions[mac]['confidence'],
                        'anchors_used': positions[mac]['anchors_used']
                    })

                    emit_log(f"–ü–æ–∑–∏—Ü–∏—è –¥–ª—è {mac}: ({position['x']:.1f}, {position['y']:.1f}, {position['z']:.1f})",
                             'success')
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è {mac}")

            else:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∫–æ—Ä–µ–π –¥–ª—è {mac}: {len(anchor_measurements)}")

        statistics['devices_detected'] = len(devices)
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {statistics['position_updates']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
        statistics['calculation_errors'] += 1


def correct_position(position, room_config):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–Ω–∞—Ç—ã"""
    x = max(0.5, min(room_config['width'] - 0.5, position['x']))
    y = max(0.5, min(room_config['height'] - 0.5, position['y']))
    z = max(0.5, min(3.0, position['z']))

    corrected = {'x': x, 'y': y, 'z': z}
    print(f"   üìç –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {corrected}")
    return corrected


def trilateration_3d(anchor_distances):
    """3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è —Å —É–º–Ω—ã–º fallback –Ω–∞ 2D"""
    try:
        print(f"üéØ –ù–∞—á–∞–ª–æ 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {len(anchor_distances)} —è–∫–æ—Ä–µ–π")

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–∫–æ—Ä–µ–π –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        anchors_list = []
        distances_list = []

        for anchor_id, distance in anchor_distances.items():
            if anchor_id in room_config['anchors']:
                anchor = room_config['anchors'][anchor_id]
                anchors_list.append([anchor['x'], anchor['y'], anchor['z']])
                distances_list.append(distance)
                print(f"üìç –Ø–∫–æ—Ä—å {anchor_id}: ({anchor['x']}, {anchor['y']}, {anchor['z']}) -> {distance}m")

        if len(anchors_list) < 3:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —è–∫–æ—Ä–µ–π –¥–ª—è —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –≤ Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–π 3D
        z_coords = [anchor[2] for anchor in anchors_list]
        z_variation = max(z_coords) - min(z_coords)

        if z_variation < 0.5:  # –ï—Å–ª–∏ –≤—ã—Å–æ—Ç—ã –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            print(f"‚ö†Ô∏è  –ú–∞–ª–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è –≤—ã—Å–æ—Ç ({z_variation:.2f}m), –∏—Å–ø–æ–ª—å–∑—É–µ–º 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é")
            return trilateration_2d_plus(anchor_distances)

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–µ–π...
        # ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏ ...

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ 3D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏: {e}")
        return trilateration_2d_plus(anchor_distances)


def trilateration_2d_plus(anchor_distances):
    """2D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è —Å —Ä–∞–∑—É–º–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"""
    try:
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—é —Å –æ—Ü–µ–Ω–∫–æ–π –≤—ã—Å–æ—Ç—ã")

        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è–∫–æ—Ä–µ–π –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º Z –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ X,Y)
        anchors_list = []
        distances_list = []
        z_coords = []

        for anchor_id, distance in anchor_distances.items():
            if anchor_id in room_config['anchors']:
                anchor = room_config['anchors'][anchor_id]
                anchors_list.append([anchor['x'], anchor['y']])  # –¢–æ–ª—å–∫–æ X, Y –¥–ª—è 2D
                distances_list.append(distance)
                z_coords.append(anchor['z'])

        if len(anchors_list) < 3:
            return None

        # 2D —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è X,Y
        A = []
        b = []

        for i in range(1, len(anchors_list)):
            xi, yi = anchors_list[i]
            x0, y0 = anchors_list[0]
            di = distances_list[i]
            d0 = distances_list[0]

            A_i = [2 * (xi - x0), 2 * (yi - y0)]
            b_i = (di ** 2 - d0 ** 2 - xi ** 2 + x0 ** 2 - yi ** 2 + y0 ** 2)

            A.append(A_i)
            b.append(b_i)

        A = np.array(A)
        b = np.array(b)

        if np.linalg.matrix_rank(A) < 2:
            print("‚ùå 2D –º–∞—Ç—Ä–∏—Ü–∞ —Ç–∞–∫–∂–µ –≤—ã—Ä–æ–∂–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥")
            return simple_geometric_method_3d(anchor_distances)

        position_2d = np.linalg.lstsq(A, b, rcond=None)[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN
        if np.any(np.isnan(position_2d)):
            return simple_geometric_method_3d(anchor_distances)

        # –û–¶–ï–ù–ò–í–ê–ï–ú Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ä–∞–∑—É–º–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        z_coordinate = estimate_smart_z_coordinate(position_2d[0], position_2d[1], anchor_distances)

        result = {
            'x': float(position_2d[0]),
            'y': float(position_2d[1]),
            'z': float(z_coordinate)  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ä–∞–∑—É–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞, –∞ –Ω–µ 0!
        }

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏—è: {result}")
        return result

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ 2D+ —Ç—Ä–∏–ª–∞—Ç–µ—Ä–∞—Ü–∏–∏: {e}")
        return simple_geometric_method_3d(anchor_distances)


def estimate_smart_z_coordinate(x, y, anchor_distances):
    """–£–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∫–æ—Ä—è—Ö
        anchors_info = []
        for anchor_id, distance in anchor_distances.items():
            if anchor_id in room_config['anchors']:
                anchor = room_config['anchors'][anchor_id]
                anchors_info.append({
                    'z': anchor['z'],
                    'distance': distance,
                    'x': anchor['x'],
                    'y': anchor['y']
                })

        # –ú–µ—Ç–æ–¥ 1: –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º
        total_weight = 0
        z_weighted = 0

        for anchor in anchors_info:
            # –ë–ª–∏–∂–∞–π—à–∏–µ —è–∫–æ—Ä—è –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤—ã—Å–æ—Ç—ã
            weight = 1.0 / (anchor['distance'] + 0.1)
            z_weighted += anchor['z'] * weight
            total_weight += weight

        avg_z = z_weighted / total_weight if total_weight > 0 else 1.5

        # –ú–µ—Ç–æ–¥ 2: –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–º–Ω–∞—Ç–µ
        room_height = 3.0  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–º–Ω–∞—Ç—ã

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–ª–∏–∑–∫–æ –∫ —Å—Ç–µ–Ω–∞–º - –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–∞ –ø–æ–ª—É –∏–ª–∏ –Ω–∏–∑–∫–æ
        close_to_wall = (x < 2.0 or x > 18.0 or y < 2.0 or y > 13.0)

        # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ–º–Ω–∞—Ç—ã - –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ —á–µ–ª–æ–≤–µ–∫–∞
        in_center = (5.0 < x < 15.0 and 5.0 < y < 10.0)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É based –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
        if close_to_wall:
            # –£ —Å—Ç–µ–Ω - –≤–µ—Ä–æ—è—Ç–Ω–æ –Ω–∞ –ø–æ–ª—É –∏–ª–∏ –Ω–∏–∑–∫–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            z_estimate = max(0.3, avg_z * 0.7)
        elif in_center:
            # –í —Ü–µ–Ω—Ç—Ä–µ - –≤–µ—Ä–æ—è—Ç–Ω–æ —á–µ–ª–æ–≤–µ–∫ (1.2-1.8–º)
            z_estimate = min(room_height * 0.6, max(1.0, avg_z))
        else:
            # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö - —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            z_estimate = avg_z

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        z_estimate = max(0.3, min(room_height - 0.5, z_estimate))

        print(f"   üìä –£–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ Z: {z_estimate:.2f}m (—Å—Ä–µ–¥–Ω–µ–µ: {avg_z:.2f}m)")
        return z_estimate

    except Exception as e:
        print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ Z, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        return 1.5  # –†–æ—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


def simple_geometric_method_3d(anchor_distances):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ —Å —Ä–∞–∑—É–º–Ω–æ–π Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π"""
    try:
        print("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥")

        anchor_ids = list(anchor_distances.keys())
        anchors = []
        distances = []

        for anchor_id in anchor_ids:
            if anchor_id in room_config['anchors']:
                anchor = room_config['anchors'][anchor_id]
                anchors.append(anchor)
                distances.append(anchor_distances[anchor_id])

        if len(anchors) < 2:
            return None

        # –ú–µ—Ç–æ–¥ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤ 3D
        total_weight = 0
        x_sum = 0
        y_sum = 0
        z_sum = 0

        for i, anchor in enumerate(anchors):
            # –í–µ—Å –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
            weight = 1.0 / (distances[i] + 0.1)
            x_sum += anchor['x'] * weight
            y_sum += anchor['y'] * weight
            z_sum += anchor['z'] * weight
            total_weight += weight

        if total_weight > 0:
            x = x_sum / total_weight
            y = y_sum / total_weight
            z = z_sum / total_weight

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º Z –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏–∫–∏
            z = estimate_smart_z_coordinate(x, y, anchor_distances)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–º–Ω–∞—Ç–æ–π
            x = max(0.5, min(room_config['width'] - 0.5, x))
            y = max(0.5, min(room_config['height'] - 0.5, y))
            z = max(0.5, min(3.0, z))

            result = {'x': x, 'y': y, 'z': z}
            print(f"‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π 3D –º–µ—Ç–æ–¥: {result}")
            return result

        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ 3D –º–µ—Ç–æ–¥–∞: {e}")
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Å —Ä–∞–∑—É–º–Ω–æ–π Z
        return {'x': 10.0, 'y': 7.5, 'z': 1.5}  # –¶–µ–Ω—Ç—Ä –∫–æ–º–Ω–∞—Ç—ã, —É—Ä–æ–≤–µ–Ω—å —á–µ–ª–æ–≤–µ–∫–∞


def is_valid_position(position, room_config):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã –≤ 3D"""
    x, y, z = position['x'], position['y'], position['z']
    valid = (0 <= x <= room_config['width'] and
             0 <= y <= room_config['height'] and
             0 <= z <= 4.0)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ 4 –º–µ—Ç—Ä–∞

    if not valid:
        print(f"‚ö†Ô∏è  –ü–æ–∑–∏—Ü–∏—è –≤–Ω–µ –∫–æ–º–Ω–∞—Ç—ã: ({x:.2f}, {y:.2f}, {z:.2f})")

    return valid


def calculate_confidence(distances, position):
    """–í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–∞—Å—á–µ—Ç–µ –ø–æ–∑–∏—Ü–∏–∏"""
    try:
        # –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π
        variance = np.var(list(distances.values()))
        confidence = max(0.1, 1.0 - variance / 10.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º

        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∫–æ—Ä–µ–π
        anchor_count = len(distances)
        confidence *= min(1.0, anchor_count / 4.0)

        return round(confidence, 2)
    except:
        return 0.5


def generate_color_from_mac(mac):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ MAC-–∞–¥—Ä–µ—Å–∞"""
    import hashlib
    hash_obj = hashlib.md5(mac.encode())
    hash_hex = hash_obj.hexdigest()[:6]
    return f'#{hash_hex}'


# WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@socketio.on('connect')
def handle_connect():
    statistics['connections'] += 1
    emit('system_status', system_status)
    emit('anchors_data', anchors)
    emit('devices_data', devices)
    emit('positions_data', positions)
    emit('statistics_update', statistics)
    emit_log('–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è', 'info')


@socketio.on('disconnect')
def handle_disconnect():
    statistics['connections'] = max(0, statistics['connections'] - 1)
    emit_log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è', 'warning')


@socketio.on('reset_system')
def handle_reset_system():
    anchors.clear()
    devices.clear()
    positions.clear()
    anchor_data.clear()
    statistics.update({
        'position_updates': 0,
        'anchor_updates': 0,
        'devices_detected': 0,
        'calculation_errors': 0
    })
    socketio.emit('system_reset')
    emit_log('–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'info')


def emit_log(message, log_type='info'):
    log_data = {
        'message': message,
        'type': log_type,
        'timestamp': datetime.now().isoformat()
    }
    socketio.emit('log_message', log_data)
    logger.info(f"[{log_type.upper()}] {message}")


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def background_task():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            current_time = datetime.now()

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥)
            expired_positions = []
            for mac, pos_data in positions.items():
                pos_time = datetime.fromisoformat(pos_data['timestamp'])
                if (current_time - pos_time).total_seconds() > 10:
                    expired_positions.append(mac)

            for mac in expired_positions:
                del positions[mac]

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            for mac in list(anchor_data.keys()):
                anchor_data[mac] = deque(
                    [m for m in anchor_data[mac]
                     if (current_time - datetime.fromisoformat(m['timestamp'])).total_seconds() <= 10],
                    maxlen=10
                )

            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            socketio.emit('system_status', system_status)
            socketio.emit('statistics_update', statistics)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {e}")

        time.sleep(2)


if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏...")
    print("üì° –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç ESP32 —è–∫–æ—Ä–µ–π...")
    print("üìç –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    bg_thread = threading.Thread(target=background_task, daemon=True)
    bg_thread.start()

    socketio.run(app,
                 host='0.0.0.0',
                 port=5000,
                 debug=False,
                 use_reloader=False,
                 allow_unsafe_werkzeug=True)