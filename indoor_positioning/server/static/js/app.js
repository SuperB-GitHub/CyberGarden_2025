/**
 * Indoor Positioning System - Frontend Application
 *
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏,
 * —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö.
 */
class IndoorPositioningApp {
    constructor() {
        this.socket = io();
        this.roomConfig = {
            width: 20,
            height: 15
        };
        this.anchors = new Map();      // –ê–∫—Ç–∏–≤–Ω—ã–µ —è–∫–æ—Ä—è
        this.devices = new Map();      // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        this.positions = new Map();    // –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        this.selectedDevice = null;    // –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –∫–∞—Ä—Ç–µ

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    init() {
        this.setupSocketListeners();
        this.setupEventListeners();
        this.renderMap();
        this.updateStartTime();
        this.requestInitialData();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ WebSocket —Å–æ–±—ã—Ç–∏–π
     */
    setupSocketListeners() {
        // –°–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.socket.on('connect', () => {
            this.addLog('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è', 'success');
            this.updateSystemStatus('–ê–ö–¢–ò–í–ù–ê');
        });

        this.socket.on('disconnect', () => {
            this.addLog('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'warning');
            this.updateSystemStatus('–û–§–§–õ–ê–ô–ù');
        });

        this.socket.on('connect_error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
            this.addLog('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ' + error.message, 'error');
            this.updateSystemStatus('–û–§–§–õ–ê–ô–ù');
        });

        // –°–æ–±—ã—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö
        this.socket.on('anchors_data', (anchors) => {
            console.log('üì° –î–∞–Ω–Ω—ã–µ —è–∫–æ—Ä–µ–π –ø–æ–ª—É—á–µ–Ω—ã:', anchors);
            this.updateAnchorsData(anchors);
        });

        this.socket.on('devices_data', (devices) => {
            console.log('üì± –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—É—á–µ–Ω—ã:', devices);
            this.updateDevicesData(devices);
        });

        this.socket.on('positions_data', (positions) => {
            console.log('üìç –î–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—É—á–µ–Ω—ã:', positions);
            this.updatePositionsData(positions);
        });

        this.socket.on('position_update', (data) => {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏:', data);
            this.handlePositionUpdate(data);
        });

        this.socket.on('anchor_update', (data) => {
            console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∫–æ—Ä—è:', data);
            this.handleAnchorUpdate(data);
        });

        // –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        this.socket.on('system_status', (status) => {
            this.updateSystemInfo(status);
        });

        this.socket.on('statistics_update', (stats) => {
            this.updateStatistics(stats);
        });

        this.socket.on('log_message', (log) => {
            this.addLog(log.message, log.type);
        });

        this.socket.on('system_reset', () => {
            this.anchors.clear();
            this.devices.clear();
            this.positions.clear();
            this.selectedDevice = null;
            this.renderAnchorsList();
            this.renderDevicesList();
            this.renderMap();
            this.clearPositionDetails();
            this.addLog('–°–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'info');
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —è–∫–æ—Ä–µ–π
     */
    updateAnchorsData(anchors) {
        this.anchors = new Map(Object.entries(anchors));
        console.log('üìä –Ø–∫–æ—Ä—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.anchors.size);
        this.renderAnchorsList();
        this.renderAnchorsOnMap();
        this.updateAnchorsCount();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    updateDevicesData(devices) {
        this.devices = new Map(Object.entries(devices));
        console.log('üìä –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.devices.size);
        this.renderDevicesList();
        this.updateDevicesCount();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
     */
    updatePositionsData(positions) {
        this.positions = new Map(Object.entries(positions));
        console.log('üìä –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', this.positions.size);
        this.renderDevicesOnMap();
        this.renderDevicesList();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    handlePositionUpdate(data) {
        this.positions.set(data.device_id, data);
        this.updateDeviceOnMap(data);
        this.updateDeviceInList(data.device_id, data.position, data.confidence);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ
        if (this.selectedDevice === data.device_id) {
            this.showPositionDetails(data.device_id);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —è–∫–æ—Ä—è
     */
    handleAnchorUpdate(data) {
        this.addLog(`–Ø–∫–æ—Ä—å ${data.anchor_id} –æ–±–Ω–æ–≤–∏–ª –¥–∞–Ω–Ω—ã–µ`, 'info');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π UI
     */
    setupEventListeners() {
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        window.resetSystem = () => {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º—É? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.')) {
                this.setButtonLoading('reset-btn', true);
                this.socket.emit('reset_system', {}, (response) => {
                    this.setButtonLoading('reset-btn', false);
                    if (response && response.status === 'success') {
                        this.addLog('–°–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞', 'success');
                    }
                });
            }
        };

        window.refreshData = () => {
            this.setButtonLoading('refresh-btn', true);
            this.requestInitialData();
            setTimeout(() => {
                this.setButtonLoading('refresh-btn', false);
                this.addLog('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'info');
            }, 1000);
        };

        // –ö–æ–Ω—Ç—Ä–æ–ª—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        window.toggleConfidenceCircles = () => {
            const show = document.getElementById('show-confidence').checked;
            const circles = document.querySelectorAll('.confidence-circle');
            circles.forEach(circle => {
                circle.style.display = show ? 'block' : 'none';
            });
        };

        window.toggleAnchorsVisibility = () => {
            const show = document.getElementById('show-anchors').checked;
            const anchors = document.querySelectorAll('.anchor-point');
            anchors.forEach(anchor => {
                anchor.style.display = show ? 'block' : 'none';
            });
        };
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
     */
    setButtonLoading(buttonId, isLoading) {
        const button = document.getElementById(buttonId);
        if (!button) return;

        const originalTexts = {
            'reset-btn': 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Å–∏—Å—Ç–µ–º—É',
            'refresh-btn': 'üîÅ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'
        };

        if (isLoading) {
            button.disabled = true;
            button.classList.add('btn-loading');
        } else {
            button.disabled = false;
            button.classList.remove('btn-loading');
            const originalText = originalTexts[buttonId];
            if (originalText) {
                button.innerHTML = originalText;
            }
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    renderMap() {
        const map = document.getElementById('map');

        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const deviceElements = map.querySelectorAll('.device-point, .device-label, .confidence-circle');
        deviceElements.forEach(element => element.remove());

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        this.positions.forEach((data, deviceId) => {
            this.updateDeviceOnMap(data);
        });

        // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —è–∫–æ—Ä—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (this.anchors.size > 0) {
            this.renderAnchorsOnMap();
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —è–∫–æ—Ä–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    renderAnchorsOnMap() {
        const container = document.getElementById('anchors-container');
        if (!container) return;

        container.innerHTML = '';

        this.anchors.forEach((anchor, anchorId) => {
            const point = document.createElement('div');
            point.className = 'anchor-point active';
            point.setAttribute('data-anchor-id', anchorId);

            const x = (anchor.x / this.roomConfig.width) * 100;
            const y = (anchor.y / this.roomConfig.height) * 100;

            point.style.left = `${x}%`;
            point.style.top = `${y}%`;

            // Tooltip —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —è–∫–æ—Ä—è
            point.title = `${anchorId}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: (${anchor.x}, ${anchor.y}, ${anchor.z})`;

            point.addEventListener('click', () => {
                this.showAnchorDetails(anchorId);
            });

            container.appendChild(point);
        });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    renderDevicesOnMap() {
        const container = document.getElementById('devices-container');
        const confidenceContainer = document.getElementById('confidence-circles');
        if (!container || !confidenceContainer) return;

        container.innerHTML = '';
        confidenceContainer.innerHTML = '';

        this.positions.forEach((data, deviceId) => {
            this.updateDeviceOnMap(data);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    updateDeviceOnMap(data) {
        const container = document.getElementById('devices-container');
        const confidenceContainer = document.getElementById('confidence-circles');
        if (!container || !confidenceContainer) return;

        let point = document.getElementById(`device-${data.device_id}`);
        let confidenceCircle = document.getElementById(`confidence-${data.device_id}`);

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (!point) {
            point = document.createElement('div');
            point.id = `device-${data.device_id}`;
            point.className = 'device-point';
            point.setAttribute('data-device-id', data.device_id);

            const deviceInfo = this.devices.get(data.device_id);
            const color = deviceInfo ? deviceInfo.color : '#3498db';
            point.style.background = color;
            point.style.border = `3px solid ${this.darkenColor(color, 20)}`;

            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å MAC-–∞–¥—Ä–µ—Å–æ–º
            const label = document.createElement('div');
            label.className = 'device-label';
            label.textContent = this.formatMacAddress(data.device_id);
            point.appendChild(label);

            point.addEventListener('click', (e) => {
                e.stopPropagation();
                this.selectDevice(data.device_id);
            });

            container.appendChild(point);
        }

        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if (!confidenceCircle) {
            confidenceCircle = document.createElement('div');
            confidenceCircle.id = `confidence-${data.device_id}`;
            confidenceCircle.className = 'confidence-circle';
            confidenceCircle.setAttribute('data-device-id', data.device_id);
            confidenceContainer.appendChild(confidenceCircle);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        const x = (data.position.x / this.roomConfig.width) * 100;
        const y = (data.position.y / this.roomConfig.height) * 100;

        point.style.left = `${x}%`;
        point.style.top = `${y}%`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏
        const radius = (1 - data.confidence) * 50 + 20; // –†–∞–¥–∏—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        confidenceCircle.style.left = `${x}%`;
        confidenceCircle.style.top = `${y}%`;
        confidenceCircle.style.width = `${radius * 2}px`;
        confidenceCircle.style.height = `${radius * 2}px`;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        const confidenceClass = data.confidence > 0.8 ? 'confidence-high' :
                               data.confidence > 0.6 ? 'confidence-medium' : 'confidence-low';
        confidenceCircle.className = `confidence-circle ${confidenceClass}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const showConfidence = document.getElementById('show-confidence').checked;
        confidenceCircle.style.display = showConfidence ? 'block' : 'none';
    }

    /**
     * –í—ã–±–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
     */
    selectDevice(deviceId) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        if (this.selectedDevice) {
            const prevPoint = document.getElementById(`device-${this.selectedDevice}`);
            if (prevPoint) {
                prevPoint.classList.remove('selected');
            }
        }

        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        this.selectedDevice = deviceId;
        const point = document.getElementById(`device-${deviceId}`);
        if (point) {
            point.classList.add('selected');
        }

        this.showPositionDetails(deviceId);
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    showPositionDetails(deviceId) {
        const position = this.positions.get(deviceId);
        const device = this.devices.get(deviceId);

        if (!position || !device) return;

        const container = document.getElementById('position-details');
        container.innerHTML = `
            <div class="detail-item">
                <span class="detail-label">MAC-–∞–¥—Ä–µ—Å:</span>
                <span class="detail-value">${deviceId}</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (3D):</span>
                <span class="detail-value">X: ${position.position.x.toFixed(2)}–º, Y: ${position.position.y.toFixed(2)}–º, Z: ${position.position.z.toFixed(2)}–º</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–¢–æ—á–Ω–æ—Å—Ç—å:</span>
                <span class="detail-value">${(position.confidence * 100).toFixed(1)}%</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–Ø–∫–æ—Ä–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</span>
                <span class="detail-value">${position.anchors_used || '–ù/–î'}</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                <span class="detail-value">${new Date(position.timestamp).toLocaleTimeString()}</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</span>
                <span class="detail-value">${this.getDeviceTypeText(device.type)}</span>
            </div>
        `;
    }

    /**
     * –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —è–∫–æ—Ä—è
     */
    showAnchorDetails(anchorId) {
        const anchor = this.anchors.get(anchorId);
        if (!anchor) return;

        const container = document.getElementById('position-details');
        container.innerHTML = `
            <div class="detail-item">
                <span class="detail-label">ID —è–∫–æ—Ä—è:</span>
                <span class="detail-value">${anchorId}</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (3D):</span>
                <span class="detail-value">X: ${anchor.x}m, Y: ${anchor.y}m, Z: ${anchor.z}m</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–°—Ç–∞—Ç—É—Å:</span>
                <span class="detail-value">${this.getAnchorStatusText(anchor.status)}</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                <span class="detail-value">${new Date(anchor.last_update).toLocaleTimeString()}</span>
            </div>
        `;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    clearPositionDetails() {
        const container = document.getElementById('position-details');
        container.innerHTML = '<div class="no-data">–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ –∫–∞—Ä—Ç–µ</div>';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
     */
    updateDeviceInList(deviceId, position, confidence) {
        const deviceElement = document.querySelector(`[data-device-id="${deviceId}"]`);
        if (deviceElement) {
            const positionElement = deviceElement.querySelector('.device-position');
            if (positionElement) {
                positionElement.textContent = `(${position.x.toFixed(1)}, ${position.y.toFixed(1)})`;
            }

            const confidenceElement = deviceElement.querySelector('.device-confidence');
            if (confidenceElement) {
                confidenceElement.textContent = `${(confidence * 100).toFixed(0)}%`;
            }
        } else {
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ—Ç
            this.renderDevicesList();
        }
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —è–∫–æ—Ä–µ–π
     */
    renderAnchorsList() {
        const container = document.getElementById('anchors-list');
        if (!container) return;

        if (this.anchors.size === 0) {
            container.innerHTML = '<div class="no-data">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —è–∫–æ—Ä–µ–π</div>';
            return;
        }

        container.innerHTML = '';
        this.anchors.forEach((anchor, anchorId) => {
            const anchorElement = document.createElement('div');
            anchorElement.className = 'anchor-item';
            anchorElement.setAttribute('data-anchor-id', anchorId);

            anchorElement.innerHTML = `
                <div class="anchor-info">
                    <div class="anchor-name">${anchorId}</div>
                    <div class="anchor-status ${anchor.status}">${this.getAnchorStatusText(anchor.status)}</div>
                </div>
                <div class="anchor-coordinates">
                    (${anchor.x}, ${anchor.y}, ${anchor.z})
                </div>
            `;

            anchorElement.addEventListener('click', () => {
                this.showAnchorDetails(anchorId);
            });

            container.appendChild(anchorElement);
        });
    }

    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    renderDevicesList() {
        const container = document.getElementById('devices-list');
        if (!container) return;

        if (this.devices.size === 0) {
            container.innerHTML = '<div class="no-data">–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</div>';
            return;
        }

        container.innerHTML = '';
        this.devices.forEach((device, deviceId) => {
            const position = this.positions.get(deviceId);
            const deviceElement = document.createElement('div');
            deviceElement.className = 'device-item';
            deviceElement.setAttribute('data-device-id', deviceId);

            const positionText = position ?
                `(${position.position.x.toFixed(1)}, ${position.position.y.toFixed(1)}, ${position.position.z.toFixed(1)})` :
                '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

            const confidenceText = position ?
                `${(position.confidence * 100).toFixed(0)}%` :
                '–ù/–î';

            deviceElement.innerHTML = `
                <div class="device-info">
                    <div class="device-mac">${this.formatMacAddress(deviceId)}</div>
                    <div class="device-type">${this.getDeviceTypeText(device.type)}</div>
                </div>
                <div style="text-align: right;">
                    <div class="device-position">${positionText}</div>
                    <div class="device-confidence" style="font-size: 0.8em; color: #7f8c8d;">${confidenceText}</div>
                </div>
            `;

            deviceElement.addEventListener('click', () => {
                this.selectDevice(deviceId);
            });

            container.appendChild(deviceElement);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    updateSystemStatus(status) {
        const element = document.getElementById('system-status');
        if (element) {
            element.textContent = status;
            element.className = `status-value status-${status.toLowerCase()}`;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    updateSystemInfo(status) {
        if (status.total_updates !== undefined) {
            document.getElementById('total-updates').textContent = status.total_updates;
        }
        if (status.last_calculation) {
            document.getElementById('last-update').textContent =
                new Date(status.last_calculation).toLocaleTimeString();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStatistics(stats) {
        if (stats.connections !== undefined) {
            document.getElementById('connections-count').textContent = stats.connections;
        }
        if (stats.position_updates !== undefined) {
            document.getElementById('updates-count').textContent = stats.position_updates;
        }
        if (stats.devices_detected !== undefined) {
            document.getElementById('devices-count').textContent = stats.devices_detected;
        }
        if (stats.calculation_errors !== undefined) {
            document.getElementById('errors-count').textContent = stats.calculation_errors;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —è–∫–æ—Ä–µ–π
     */
    updateAnchorsCount() {
        const countElement = document.getElementById('anchors-count');
        if (countElement) {
            countElement.textContent = this.anchors.size;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
     */
    updateDevicesCount() {
        const countElement = document.getElementById('devices-count');
        if (countElement) {
            countElement.textContent = this.devices.size;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ª–æ–≥
     */
    addLog(message, type = 'info') {
        const log = document.getElementById('system-log');
        if (log) {
            const entry = document.createElement('div');
            entry.className = 'log-entry';

            entry.innerHTML = `
                <span class="log-time">${new Date().toLocaleTimeString()}</span>
                <span class="log-message log-type-${type}">${message}</span>
            `;

            log.appendChild(entry);
            log.scrollTop = log.scrollHeight;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    updateStartTime() {
        const startTimeElement = document.getElementById('start-time');
        if (startTimeElement) {
            startTimeElement.textContent = new Date().toLocaleTimeString();
        }
    }

    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
     */
    requestInitialData() {
        fetch('/api/anchors')
            .then(response => response.json())
            .then(anchors => this.updateAnchorsData(anchors))
            .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —è–∫–æ—Ä–µ–π:', error));

        fetch('/api/devices')
            .then(response => response.json())
            .then(devices => this.updateDevicesData(devices))
            .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error));

        fetch('/api/positions')
            .then(response => response.json())
            .then(positions => this.updatePositionsData(positions))
            .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π:', error));

        fetch('/api/status')
            .then(response => response.json())
            .then(status => {
                this.updateSystemInfo(status.system);
                this.updateStatistics(status.statistics);
            })
            .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MAC-–∞–¥—Ä–µ—Å–∞
     */
    formatMacAddress(mac) {
        if (mac.length <= 12) return mac;
        return mac.match(/.{1,2}/g).join(':').toUpperCase();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     */
    getDeviceTypeText(type) {
        const types = {
            'mobile_device': '–ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
            'robot': '–†–æ–±–æ—Ç',
            'human': '–û–ø–µ—Ä–∞—Ç–æ—Ä',
            'unknown': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
        return types[type] || type;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —è–∫–æ—Ä—è
     */
    getAnchorStatusText(status) {
        const statuses = {
            'active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'inactive': '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω',
            'error': '–û—à–∏–±–∫–∞'
        };
        return statuses[status] || status;
    }

    /**
     * –ó–∞—Ç–µ–º–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
     */
    darkenColor(color, percent) {
        const num = parseInt(color.replace("#", ""), 16);
        const amt = Math.round(2.55 * percent);
        const R = (num >> 16) - amt;
        const G = (num >> 8 & 0x00FF) - amt;
        const B = (num & 0x0000FF) - amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 +
            (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 +
            (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
document.addEventListener('click', (e) => {
    if (!e.target.closest('.device-point') && !e.target.closest('.anchor-point')) {
        if (app && app.selectedDevice) {
            const point = document.getElementById(`device-${app.selectedDevice}`);
            if (point) {
                point.classList.remove('selected');
            }
            app.selectedDevice = null;
            app.clearPositionDetails();
        }
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new IndoorPositioningApp();
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
window.clearLog = () => {
    const logContainer = document.getElementById('system-log');
    if (logContainer) {
        const firstEntry = logContainer.querySelector('.log-entry:first-child');
        logContainer.innerHTML = '';
        if (firstEntry) {
            logContainer.appendChild(firstEntry);
        }
        if (app) {
            app.addLog('–õ–æ–≥ –æ—á–∏—â–µ–Ω', 'info');
        }
    }
};