#include <WiFi.h>
#include <HTTPClient.h>
#include <esp_wifi.h>
#include <vector>
#include <map>

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const char* serverURL = "http://192.168.0.244:5000";
String anchor_id = "–Ø–∫–æ—Ä—å_2";

// –î–∞–Ω–Ω—ã–µ WiFi
const char* wifi_ssid = "DESKTOP-JVL1750 9295";
const char* wifi_password = "^74b470T";

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
struct DeviceInfo {
  String mac;
  String ssid;        // –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è SSID
  bool hidden_ssid;   // –§–ª–∞–≥ —Å–∫—Ä—ã—Ç–æ–≥–æ SSID
  int rssi;
  float distance;
  unsigned long lastSeen;
  bool active;
  int channel;
  float rssi_filtered; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ RSSI
  int packet_count;    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π
  long timestamp;      // –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
};

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
std::vector<DeviceInfo> devices;

// –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç
struct ChannelCalibration {
  int channel;
  float n;  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è
  float A;  // RSSI –Ω–∞ 1 –º–µ—Ç—Ä–µ
};

ChannelCalibration channelCalibrations[] = {
  {1, 2.2, -45},  // 2.4 GHz
  {6, 2.3, -45},  // 2.4 GHz  
  {11, 2.4, -45}, // 2.4 GHz
  {36, 2.1, -40}, // 5 GHz
  {40, 2.1, -40}, // 5 GHz
  {44, 2.1, -40}, // 5 GHz
  {48, 2.1, -40}  // 5 GHz
};

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –¥–ª—è RSSI
class KalmanFilter {
private:
  float Q = 0.1;  // –®—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞
  float R = 2.0;  // –®—É–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
  float P = 1.0;  // –ö–æ–≤–∞—Ä–∏–∞—Ü–∏—è –æ—à–∏–±–∫–∏
  float X = 0.0;  // –û—Ü–µ–Ω–∫–∞
  
public:
  float update(float measurement) {
    // –ü—Ä–æ–≥–Ω–æ–∑
    P = P + Q;
    
    // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è
    float K = P / (P + R);
    X = X + K * (measurement - X);
    P = (1 - K) * P;
    
    return X;
  }
  
  void reset() {
    P = 1.0;
    X = 0.0;
  }
};

std::map<String, KalmanFilter> kalmanFilters;

WiFiClient wifiClient;

void setup() {
  Serial.begin(115200);
  delay(2000);
  
  Serial.println("üöÄ Starting ESP32 Anchor (Improved Version)...");
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  WiFi.mode(WIFI_STA);
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WiFi –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  esp_wifi_set_protocol(WIFI_IF_STA, WIFI_PROTOCOL_11B | WIFI_PROTOCOL_11G | WIFI_PROTOCOL_11N | WIFI_PROTOCOL_LR);
  esp_wifi_set_bandwidth(WIFI_IF_STA, WIFI_BW_HT20);
  
  Serial.printf("üì∂ Connecting to WiFi: %s\n", wifi_ssid);
  WiFi.begin(wifi_ssid, wifi_password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(1000);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi connected successfully!");
    Serial.printf("  - IP Address: %s\n", WiFi.localIP().toString().c_str());
    Serial.printf("  - RSSI: %d dBm\n", WiFi.RSSI());
  } else {
    Serial.println("\n‚ùå WiFi connection failed!");
    return;
  }
  
  // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  devices.reserve(50);
  
  Serial.println("‚úÖ System initialized and ready for scanning");
}

void loop() {
  static unsigned long lastScan = 0;
  unsigned long currentTime = millis();
  
  if (currentTime - lastScan > 2000) {
    Serial.println("\n=== SCAN CYCLE START ===");
    scanForDevices();
    sendDataToServer();
    lastScan = currentTime;
    Serial.println("=== SCAN CYCLE END ===\n");
  }
  
  static unsigned long lastCleanup = 0;
  if (currentTime - lastCleanup > 15000) {
    cleanupOldDevices();
    lastCleanup = currentTime;
  }
  
  delay(100);
}

void scanForDevices() {
  Serial.println("üîç Starting advanced WiFi scan...");
  
  int scanResult = WiFi.scanNetworks(false, true);
  Serial.printf("  - Found %d networks\n", scanResult);
  
  if (scanResult == 0) {
    Serial.println("  - No networks found");
    return;
  }
  
  int newDevices = 0;
  int updatedDevices = 0;
  
  for (int i = 0; i < scanResult; ++i) {
    String mac = WiFi.BSSIDstr(i);
    String ssid = WiFi.SSID(i);  // –ü–æ–ª—É—á–∞–µ–º SSID
    int rssi = WiFi.RSSI(i);
    int channel = WiFi.channel(i);
    
    if (mac.length() == 0 || isOurOwnDevice(mac)) {
      continue;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ SSID —Å–∫—Ä—ã—Ç—ã–º
    bool hidden_ssid = (ssid.length() == 0);
    
    // –î–ª—è —Å–∫—Ä—ã—Ç—ã—Ö —Å–µ—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ
    if (hidden_ssid) {
      ssid = "<Hidden_Network>";
    }
    
    if (updateDevice(mac, ssid, hidden_ssid, rssi, channel)) {
      newDevices++;
    } else {
      updatedDevices++;
    }
  }
  
  Serial.printf("  - New devices: %d\n", newDevices);
  Serial.printf("  - Updated devices: %d\n", updatedDevices);
  Serial.printf("  - Total active devices: %d\n", devices.size());
  
  WiFi.scanDelete();
}

bool updateDevice(String mac, String ssid, bool hidden_ssid, int rssi, int channel) {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞ –∫ RSSI
  if (kalmanFilters.find(mac) == kalmanFilters.end()) {
    kalmanFilters[mac] = KalmanFilter();
  }
  
  float filtered_rssi = kalmanFilters[mac].update(rssi);
  
  // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  for(auto& device : devices) {
    if(device.active && device.mac == mac) {
      device.rssi = rssi;
      device.rssi_filtered = filtered_rssi;
      device.distance = calculateDistance(filtered_rssi, channel);
      device.lastSeen = millis();
      device.packet_count++;
      device.timestamp = esp_timer_get_time() / 1000; // –º—Å
      
      // –û–±–Ω–æ–≤–ª—è–µ–º SSID —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–∫—Ä—ã—Ç—ã–º, –∞ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–ª –∏–∑–≤–µ—Å—Ç–Ω—ã–º
      if (device.hidden_ssid && !hidden_ssid) {
        device.ssid = ssid;
        device.hidden_ssid = false;
        Serial.printf("  - Revealed hidden SSID for %s: %s\n", mac.c_str(), ssid.c_str());
      }
      
      Serial.printf("  - Updated device: %s, SSID: %s, RSSI: %d (filtered: %.1f), Distance: %.2fm, Channel: %d\n", 
                   mac.c_str(), device.ssid.c_str(), rssi, filtered_rssi, device.distance, channel);
      return false;
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  DeviceInfo newDevice;
  newDevice.mac = mac;
  newDevice.ssid = ssid;
  newDevice.hidden_ssid = hidden_ssid;
  newDevice.rssi = rssi;
  newDevice.rssi_filtered = filtered_rssi;
  newDevice.channel = channel;
  newDevice.distance = calculateDistance(filtered_rssi, channel);
  newDevice.lastSeen = millis();
  newDevice.active = true;
  newDevice.packet_count = 1;
  newDevice.timestamp = esp_timer_get_time() / 1000;
  
  devices.push_back(newDevice);
  
  Serial.printf("  - NEW DEVICE: %s, SSID: %s, RSSI: %d (filtered: %.1f), Distance: %.2fm, Channel: %d\n", 
               mac.c_str(), ssid.c_str(), rssi, filtered_rssi, newDevice.distance, channel);
  return true;
}

float calculateDistance(float rssi, int channel) {
  // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–∞
  float n = 2.5; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  float A = -45; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  for(const auto& cal : channelCalibrations) {
    if(cal.channel == channel) {
      n = cal.n;
      A = cal.A;
      break;
    }
  }
  
  if (rssi >= A) {
    return 0.1;
  }
  
  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç
  float distance = pow(10, (A - rssi) / (10 * n));
  
  // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è 5GHz –∫–∞–Ω–∞–ª–æ–≤
  if (channel > 14) {
    distance *= 0.9; // 5GHz —Å–∏–≥–Ω–∞–ª—ã –∑–∞—Ç—É—Ö–∞—é—Ç –±—ã—Å—Ç—Ä–µ–µ
  }
  
  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
  if (distance > 50.0) distance = 50.0;
  if (distance < 0.1) distance = 0.1;
  
  return distance;
}

void sendDataToServer() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi not connected, cannot send data");
    return;
  }
  
  HTTPClient http;
  
  String jsonData = "{\"anchor_id\":\"" + anchor_id + "\",\"timestamp\":" + 
                    String(millis()) + ",\"measurements\":[";
  
  bool first = true;
  
  for(const auto& device : devices) {
    if(device.active) {
      if(!first) jsonData += ",";
      jsonData += "{\"mac\":\"" + device.mac + 
                  "\",\"ssid\":\"" + device.ssid + 
                  "\",\"hidden_ssid\":" + String(device.hidden_ssid ? "true" : "false") +
                  ",\"rssi\":" + String(device.rssi) + 
                  ",\"rssi_filtered\":" + String(device.rssi_filtered, 1) +
                  ",\"distance\":" + String(device.distance, 2) +
                  ",\"channel\":" + String(device.channel) +
                  ",\"packet_count\":" + String(device.packet_count) +
                  ",\"device_timestamp\":" + String(device.timestamp) + "}";
      first = false;
    }
  }
  
  jsonData += "]}";
  
  String fullURL = String(serverURL) + "/api/anchor_data";
  
  Serial.printf("üì° Sending data to server:\n");
  Serial.printf("  - URL: %s\n", fullURL.c_str());
  Serial.printf("  - Active devices: %d\n", devices.size());
  
  http.begin(wifiClient, fullURL);
  http.addHeader("Content-Type", "application/json");
  http.setTimeout(5000);
  
  int httpResponseCode = http.POST(jsonData);
  
  if (httpResponseCode > 0) {
    Serial.printf("‚úÖ Data sent successfully: HTTP %d\n", httpResponseCode);
    String response = http.getString();
    Serial.printf("  - Server response: %s\n", response.c_str());
  } else {
    Serial.printf("‚ùå Send error: %d\n", httpResponseCode);
    Serial.printf("  - Error: %s\n", http.errorToString(httpResponseCode).c_str());
  }
  
  http.end();
}

void cleanupOldDevices() {
  unsigned long currentTime = millis();
  int removedCount = 0;
  
  for(auto it = devices.begin(); it != devices.end();) {
    if(it->active && (currentTime - it->lastSeen > 15000)) {
      Serial.printf("üóëÔ∏è Device removed (timeout): %s (SSID: %s)\n", it->mac.c_str(), it->ssid.c_str());
      // –£–¥–∞–ª—è–µ–º —Ç–∞–∫–∂–µ —Ñ–∏–ª—å—Ç—Ä –ö–∞–ª–º–∞–Ω–∞
      kalmanFilters.erase(it->mac);
      it = devices.erase(it);
      removedCount++;
    } else {
      ++it;
    }
  }
  
  if (removedCount > 0) {
    Serial.printf("  - Total devices removed: %d\n", removedCount);
  }
}

bool isOurOwnDevice(String mac) {
  String ourMacs[] = {
    "AA:BB:CC:DD:EE:01", "AA:BB:CC:DD:EE:02", 
    "AA:BB:CC:DD:EE:03", "AA:BB:CC:DD:EE:04"
  };
  
  for (String ourMac : ourMacs) {
    if (mac == ourMac) {
      return true;
    }
  }
  return false;
}